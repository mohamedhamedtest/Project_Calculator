
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000039ea  00003a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002430  00000000  00000000  00003a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e10  00000000  00000000  00005eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ac3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b40b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <main>
      7a:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c6 54       	subi	r28, 0x46	; 70
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	fe 01       	movw	r30, r28
     b52:	ed 5b       	subi	r30, 0xBD	; 189
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a8 e4       	ldi	r26, 0x48	; 72
     b5c:	b3 e4       	ldi	r27, 0x43	; 67
     b5e:	80 83       	st	Z, r24
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	a2 83       	std	Z+2, r26	; 0x02
     b64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b66:	8e 01       	movw	r16, r28
     b68:	01 5c       	subi	r16, 0xC1	; 193
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	fe 01       	movw	r30, r28
     b6e:	ed 5b       	subi	r30, 0xBD	; 189
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	60 81       	ld	r22, Z
     b74:	71 81       	ldd	r23, Z+1	; 0x01
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	4a ef       	ldi	r20, 0xFA	; 250
     b80:	54 e4       	ldi	r21, 0x44	; 68
     b82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	f8 01       	movw	r30, r16
     b8c:	80 83       	st	Z, r24
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	a2 83       	std	Z+2, r26	; 0x02
     b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b94:	fe 01       	movw	r30, r28
     b96:	ff 96       	adiw	r30, 0x3f	; 63
     b98:	60 81       	ld	r22, Z
     b9a:	71 81       	ldd	r23, Z+1	; 0x01
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e8       	ldi	r20, 0x80	; 128
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bac:	88 23       	and	r24, r24
     bae:	2c f4       	brge	.+10     	; 0xbba <LCD_vInit+0x84>
		__ticks = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9e af       	std	Y+62, r25	; 0x3e
     bb6:	8d af       	std	Y+61, r24	; 0x3d
     bb8:	46 c0       	rjmp	.+140    	; 0xc46 <LCD_vInit+0x110>
	else if (__tmp > 65535)
     bba:	fe 01       	movw	r30, r28
     bbc:	ff 96       	adiw	r30, 0x3f	; 63
     bbe:	60 81       	ld	r22, Z
     bc0:	71 81       	ldd	r23, Z+1	; 0x01
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	93 81       	ldd	r25, Z+3	; 0x03
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	3f ef       	ldi	r19, 0xFF	; 255
     bca:	4f e7       	ldi	r20, 0x7F	; 127
     bcc:	57 e4       	ldi	r21, 0x47	; 71
     bce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd2:	18 16       	cp	r1, r24
     bd4:	64 f5       	brge	.+88     	; 0xc2e <LCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd6:	fe 01       	movw	r30, r28
     bd8:	ed 5b       	subi	r30, 0xBD	; 189
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e af       	std	Y+62, r25	; 0x3e
     c02:	8d af       	std	Y+61, r24	; 0x3d
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <LCD_vInit+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c af       	std	Y+60, r25	; 0x3c
     c0c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b ad       	ldd	r24, Y+59	; 0x3b
     c10:	9c ad       	ldd	r25, Y+60	; 0x3c
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <LCD_vInit+0xdc>
     c16:	9c af       	std	Y+60, r25	; 0x3c
     c18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c1c:	9e ad       	ldd	r25, Y+62	; 0x3e
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e af       	std	Y+62, r25	; 0x3e
     c22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d ad       	ldd	r24, Y+61	; 0x3d
     c26:	9e ad       	ldd	r25, Y+62	; 0x3e
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <LCD_vInit+0xd0>
     c2c:	16 c0       	rjmp	.+44     	; 0xc5a <LCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	fe 01       	movw	r30, r28
     c30:	ff 96       	adiw	r30, 0x3f	; 63
     c32:	60 81       	ld	r22, Z
     c34:	71 81       	ldd	r23, Z+1	; 0x01
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9e af       	std	Y+62, r25	; 0x3e
     c44:	8d af       	std	Y+61, r24	; 0x3d
     c46:	8d ad       	ldd	r24, Y+61	; 0x3d
     c48:	9e ad       	ldd	r25, Y+62	; 0x3e
     c4a:	9a af       	std	Y+58, r25	; 0x3a
     c4c:	89 af       	std	Y+57, r24	; 0x39
     c4e:	89 ad       	ldd	r24, Y+57	; 0x39
     c50:	9a ad       	ldd	r25, Y+58	; 0x3a
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <LCD_vInit+0x11c>
     c56:	9a af       	std	Y+58, r25	; 0x3a
     c58:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
     c5a:	81 e4       	ldi	r24, 0x41	; 65
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	41 e0       	ldi	r20, 0x01	; 1
     c60:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
     c64:	81 e4       	ldi	r24, 0x41	; 65
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	41 e0       	ldi	r20, 0x01	; 1
     c6a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
     c6e:	81 e4       	ldi	r24, 0x41	; 65
     c70:	62 e0       	ldi	r22, 0x02	; 2
     c72:	41 e0       	ldi	r20, 0x01	; 1
     c74:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
     c78:	81 e4       	ldi	r24, 0x41	; 65
     c7a:	63 e0       	ldi	r22, 0x03	; 3
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
     c82:	81 e4       	ldi	r24, 0x41	; 65
     c84:	64 e0       	ldi	r22, 0x04	; 4
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
     c8c:	81 e4       	ldi	r24, 0x41	; 65
     c8e:	65 e0       	ldi	r22, 0x05	; 5
     c90:	41 e0       	ldi	r20, 0x01	; 1
     c92:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
     c96:	81 e4       	ldi	r24, 0x41	; 65
     c98:	66 e0       	ldi	r22, 0x06	; 6
     c9a:	41 e0       	ldi	r20, 0x01	; 1
     c9c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
     ca0:	81 e4       	ldi	r24, 0x41	; 65
     ca2:	67 e0       	ldi	r22, 0x07	; 7
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
     caa:	82 e4       	ldi	r24, 0x42	; 66
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
     cb4:	82 e4       	ldi	r24, 0x42	; 66
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
     cbe:	82 e4       	ldi	r24, 0x42	; 66
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
     cc8:	82 e4       	ldi	r24, 0x42	; 66
     cca:	62 e0       	ldi	r22, 0x02	; 2
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
     cd2:	88 e3       	ldi	r24, 0x38	; 56
     cd4:	0e 94 4a 09 	call	0x1294	; 0x1294 <LCD_vSend_cmd>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e8       	ldi	r26, 0x80	; 128
     cde:	bf e3       	ldi	r27, 0x3F	; 63
     ce0:	8d ab       	std	Y+53, r24	; 0x35
     ce2:	9e ab       	std	Y+54, r25	; 0x36
     ce4:	af ab       	std	Y+55, r26	; 0x37
     ce6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	6d a9       	ldd	r22, Y+53	; 0x35
     cea:	7e a9       	ldd	r23, Y+54	; 0x36
     cec:	8f a9       	ldd	r24, Y+55	; 0x37
     cee:	98 ad       	ldd	r25, Y+56	; 0x38
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4a ef       	ldi	r20, 0xFA	; 250
     cf6:	54 e4       	ldi	r21, 0x44	; 68
     cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	89 ab       	std	Y+49, r24	; 0x31
     d02:	9a ab       	std	Y+50, r25	; 0x32
     d04:	ab ab       	std	Y+51, r26	; 0x33
     d06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d08:	69 a9       	ldd	r22, Y+49	; 0x31
     d0a:	7a a9       	ldd	r23, Y+50	; 0x32
     d0c:	8b a9       	ldd	r24, Y+51	; 0x33
     d0e:	9c a9       	ldd	r25, Y+52	; 0x34
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e8       	ldi	r20, 0x80	; 128
     d16:	5f e3       	ldi	r21, 0x3F	; 63
     d18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	2c f4       	brge	.+10     	; 0xd2a <LCD_vInit+0x1f4>
		__ticks = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	98 ab       	std	Y+48, r25	; 0x30
     d26:	8f a7       	std	Y+47, r24	; 0x2f
     d28:	3f c0       	rjmp	.+126    	; 0xda8 <LCD_vInit+0x272>
	else if (__tmp > 65535)
     d2a:	69 a9       	ldd	r22, Y+49	; 0x31
     d2c:	7a a9       	ldd	r23, Y+50	; 0x32
     d2e:	8b a9       	ldd	r24, Y+51	; 0x33
     d30:	9c a9       	ldd	r25, Y+52	; 0x34
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	3f ef       	ldi	r19, 0xFF	; 255
     d36:	4f e7       	ldi	r20, 0x7F	; 127
     d38:	57 e4       	ldi	r21, 0x47	; 71
     d3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d3e:	18 16       	cp	r1, r24
     d40:	4c f5       	brge	.+82     	; 0xd94 <LCD_vInit+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	6d a9       	ldd	r22, Y+53	; 0x35
     d44:	7e a9       	ldd	r23, Y+54	; 0x36
     d46:	8f a9       	ldd	r24, Y+55	; 0x37
     d48:	98 ad       	ldd	r25, Y+56	; 0x38
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e2       	ldi	r20, 0x20	; 32
     d50:	51 e4       	ldi	r21, 0x41	; 65
     d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	98 ab       	std	Y+48, r25	; 0x30
     d68:	8f a7       	std	Y+47, r24	; 0x2f
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <LCD_vInit+0x254>
     d6c:	88 ec       	ldi	r24, 0xC8	; 200
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9e a7       	std	Y+46, r25	; 0x2e
     d72:	8d a7       	std	Y+45, r24	; 0x2d
     d74:	8d a5       	ldd	r24, Y+45	; 0x2d
     d76:	9e a5       	ldd	r25, Y+46	; 0x2e
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <LCD_vInit+0x242>
     d7c:	9e a7       	std	Y+46, r25	; 0x2e
     d7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d80:	8f a5       	ldd	r24, Y+47	; 0x2f
     d82:	98 a9       	ldd	r25, Y+48	; 0x30
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	98 ab       	std	Y+48, r25	; 0x30
     d88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     d8c:	98 a9       	ldd	r25, Y+48	; 0x30
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	69 f7       	brne	.-38     	; 0xd6c <LCD_vInit+0x236>
     d92:	14 c0       	rjmp	.+40     	; 0xdbc <LCD_vInit+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d94:	69 a9       	ldd	r22, Y+49	; 0x31
     d96:	7a a9       	ldd	r23, Y+50	; 0x32
     d98:	8b a9       	ldd	r24, Y+51	; 0x33
     d9a:	9c a9       	ldd	r25, Y+52	; 0x34
     d9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	98 ab       	std	Y+48, r25	; 0x30
     da6:	8f a7       	std	Y+47, r24	; 0x2f
     da8:	8f a5       	ldd	r24, Y+47	; 0x2f
     daa:	98 a9       	ldd	r25, Y+48	; 0x30
     dac:	9c a7       	std	Y+44, r25	; 0x2c
     dae:	8b a7       	std	Y+43, r24	; 0x2b
     db0:	8b a5       	ldd	r24, Y+43	; 0x2b
     db2:	9c a5       	ldd	r25, Y+44	; 0x2c
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <LCD_vInit+0x27e>
     db8:	9c a7       	std	Y+44, r25	; 0x2c
     dba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
     dbc:	8e e0       	ldi	r24, 0x0E	; 14
     dbe:	0e 94 4a 09 	call	0x1294	; 0x1294 <LCD_vSend_cmd>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a0 e8       	ldi	r26, 0x80	; 128
     dc8:	bf e3       	ldi	r27, 0x3F	; 63
     dca:	8f a3       	std	Y+39, r24	; 0x27
     dcc:	98 a7       	std	Y+40, r25	; 0x28
     dce:	a9 a7       	std	Y+41, r26	; 0x29
     dd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd2:	6f a1       	ldd	r22, Y+39	; 0x27
     dd4:	78 a5       	ldd	r23, Y+40	; 0x28
     dd6:	89 a5       	ldd	r24, Y+41	; 0x29
     dd8:	9a a5       	ldd	r25, Y+42	; 0x2a
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	4a ef       	ldi	r20, 0xFA	; 250
     de0:	54 e4       	ldi	r21, 0x44	; 68
     de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8b a3       	std	Y+35, r24	; 0x23
     dec:	9c a3       	std	Y+36, r25	; 0x24
     dee:	ad a3       	std	Y+37, r26	; 0x25
     df0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     df2:	6b a1       	ldd	r22, Y+35	; 0x23
     df4:	7c a1       	ldd	r23, Y+36	; 0x24
     df6:	8d a1       	ldd	r24, Y+37	; 0x25
     df8:	9e a1       	ldd	r25, Y+38	; 0x26
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e8       	ldi	r20, 0x80	; 128
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e06:	88 23       	and	r24, r24
     e08:	2c f4       	brge	.+10     	; 0xe14 <LCD_vInit+0x2de>
		__ticks = 1;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9a a3       	std	Y+34, r25	; 0x22
     e10:	89 a3       	std	Y+33, r24	; 0x21
     e12:	3f c0       	rjmp	.+126    	; 0xe92 <LCD_vInit+0x35c>
	else if (__tmp > 65535)
     e14:	6b a1       	ldd	r22, Y+35	; 0x23
     e16:	7c a1       	ldd	r23, Y+36	; 0x24
     e18:	8d a1       	ldd	r24, Y+37	; 0x25
     e1a:	9e a1       	ldd	r25, Y+38	; 0x26
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	3f ef       	ldi	r19, 0xFF	; 255
     e20:	4f e7       	ldi	r20, 0x7F	; 127
     e22:	57 e4       	ldi	r21, 0x47	; 71
     e24:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e28:	18 16       	cp	r1, r24
     e2a:	4c f5       	brge	.+82     	; 0xe7e <LCD_vInit+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2c:	6f a1       	ldd	r22, Y+39	; 0x27
     e2e:	78 a5       	ldd	r23, Y+40	; 0x28
     e30:	89 a5       	ldd	r24, Y+41	; 0x29
     e32:	9a a5       	ldd	r25, Y+42	; 0x2a
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e2       	ldi	r20, 0x20	; 32
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	9a a3       	std	Y+34, r25	; 0x22
     e52:	89 a3       	std	Y+33, r24	; 0x21
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <LCD_vInit+0x33e>
     e56:	88 ec       	ldi	r24, 0xC8	; 200
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	98 a3       	std	Y+32, r25	; 0x20
     e5c:	8f 8f       	std	Y+31, r24	; 0x1f
     e5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e60:	98 a1       	ldd	r25, Y+32	; 0x20
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <LCD_vInit+0x32c>
     e66:	98 a3       	std	Y+32, r25	; 0x20
     e68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6a:	89 a1       	ldd	r24, Y+33	; 0x21
     e6c:	9a a1       	ldd	r25, Y+34	; 0x22
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	9a a3       	std	Y+34, r25	; 0x22
     e72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e74:	89 a1       	ldd	r24, Y+33	; 0x21
     e76:	9a a1       	ldd	r25, Y+34	; 0x22
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	69 f7       	brne	.-38     	; 0xe56 <LCD_vInit+0x320>
     e7c:	14 c0       	rjmp	.+40     	; 0xea6 <LCD_vInit+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7e:	6b a1       	ldd	r22, Y+35	; 0x23
     e80:	7c a1       	ldd	r23, Y+36	; 0x24
     e82:	8d a1       	ldd	r24, Y+37	; 0x25
     e84:	9e a1       	ldd	r25, Y+38	; 0x26
     e86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9a a3       	std	Y+34, r25	; 0x22
     e90:	89 a3       	std	Y+33, r24	; 0x21
     e92:	89 a1       	ldd	r24, Y+33	; 0x21
     e94:	9a a1       	ldd	r25, Y+34	; 0x22
     e96:	9e 8f       	std	Y+30, r25	; 0x1e
     e98:	8d 8f       	std	Y+29, r24	; 0x1d
     e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <LCD_vInit+0x368>
     ea2:	9e 8f       	std	Y+30, r25	; 0x1e
     ea4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0e 94 4a 09 	call	0x1294	; 0x1294 <LCD_vSend_cmd>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a0 e2       	ldi	r26, 0x20	; 32
     eb2:	b1 e4       	ldi	r27, 0x41	; 65
     eb4:	89 8f       	std	Y+25, r24	; 0x19
     eb6:	9a 8f       	std	Y+26, r25	; 0x1a
     eb8:	ab 8f       	std	Y+27, r26	; 0x1b
     eba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ebc:	69 8d       	ldd	r22, Y+25	; 0x19
     ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4a ef       	ldi	r20, 0xFA	; 250
     eca:	54 e4       	ldi	r21, 0x44	; 68
     ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8d 8b       	std	Y+21, r24	; 0x15
     ed6:	9e 8b       	std	Y+22, r25	; 0x16
     ed8:	af 8b       	std	Y+23, r26	; 0x17
     eda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     edc:	6d 89       	ldd	r22, Y+21	; 0x15
     ede:	7e 89       	ldd	r23, Y+22	; 0x16
     ee0:	8f 89       	ldd	r24, Y+23	; 0x17
     ee2:	98 8d       	ldd	r25, Y+24	; 0x18
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	5f e3       	ldi	r21, 0x3F	; 63
     eec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	2c f4       	brge	.+10     	; 0xefe <LCD_vInit+0x3c8>
		__ticks = 1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 8b       	std	Y+20, r25	; 0x14
     efa:	8b 8b       	std	Y+19, r24	; 0x13
     efc:	3f c0       	rjmp	.+126    	; 0xf7c <LCD_vInit+0x446>
	else if (__tmp > 65535)
     efe:	6d 89       	ldd	r22, Y+21	; 0x15
     f00:	7e 89       	ldd	r23, Y+22	; 0x16
     f02:	8f 89       	ldd	r24, Y+23	; 0x17
     f04:	98 8d       	ldd	r25, Y+24	; 0x18
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	3f ef       	ldi	r19, 0xFF	; 255
     f0a:	4f e7       	ldi	r20, 0x7F	; 127
     f0c:	57 e4       	ldi	r21, 0x47	; 71
     f0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f12:	18 16       	cp	r1, r24
     f14:	4c f5       	brge	.+82     	; 0xf68 <LCD_vInit+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f16:	69 8d       	ldd	r22, Y+25	; 0x19
     f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e2       	ldi	r20, 0x20	; 32
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	9c 8b       	std	Y+20, r25	; 0x14
     f3c:	8b 8b       	std	Y+19, r24	; 0x13
     f3e:	0f c0       	rjmp	.+30     	; 0xf5e <LCD_vInit+0x428>
     f40:	88 ec       	ldi	r24, 0xC8	; 200
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9a 8b       	std	Y+18, r25	; 0x12
     f46:	89 8b       	std	Y+17, r24	; 0x11
     f48:	89 89       	ldd	r24, Y+17	; 0x11
     f4a:	9a 89       	ldd	r25, Y+18	; 0x12
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <LCD_vInit+0x416>
     f50:	9a 8b       	std	Y+18, r25	; 0x12
     f52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f54:	8b 89       	ldd	r24, Y+19	; 0x13
     f56:	9c 89       	ldd	r25, Y+20	; 0x14
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	9c 8b       	std	Y+20, r25	; 0x14
     f5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5e:	8b 89       	ldd	r24, Y+19	; 0x13
     f60:	9c 89       	ldd	r25, Y+20	; 0x14
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	69 f7       	brne	.-38     	; 0xf40 <LCD_vInit+0x40a>
     f66:	14 c0       	rjmp	.+40     	; 0xf90 <LCD_vInit+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f68:	6d 89       	ldd	r22, Y+21	; 0x15
     f6a:	7e 89       	ldd	r23, Y+22	; 0x16
     f6c:	8f 89       	ldd	r24, Y+23	; 0x17
     f6e:	98 8d       	ldd	r25, Y+24	; 0x18
     f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9c 8b       	std	Y+20, r25	; 0x14
     f7a:	8b 8b       	std	Y+19, r24	; 0x13
     f7c:	8b 89       	ldd	r24, Y+19	; 0x13
     f7e:	9c 89       	ldd	r25, Y+20	; 0x14
     f80:	98 8b       	std	Y+16, r25	; 0x10
     f82:	8f 87       	std	Y+15, r24	; 0x0f
     f84:	8f 85       	ldd	r24, Y+15	; 0x0f
     f86:	98 89       	ldd	r25, Y+16	; 0x10
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <LCD_vInit+0x452>
     f8c:	98 8b       	std	Y+16, r25	; 0x10
     f8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
     f90:	86 e0       	ldi	r24, 0x06	; 6
     f92:	0e 94 4a 09 	call	0x1294	; 0x1294 <LCD_vSend_cmd>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e8       	ldi	r26, 0x80	; 128
     f9c:	bf e3       	ldi	r27, 0x3F	; 63
     f9e:	8b 87       	std	Y+11, r24	; 0x0b
     fa0:	9c 87       	std	Y+12, r25	; 0x0c
     fa2:	ad 87       	std	Y+13, r26	; 0x0d
     fa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
     faa:	8d 85       	ldd	r24, Y+13	; 0x0d
     fac:	9e 85       	ldd	r25, Y+14	; 0x0e
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	4a ef       	ldi	r20, 0xFA	; 250
     fb4:	54 e4       	ldi	r21, 0x44	; 68
     fb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	8f 83       	std	Y+7, r24	; 0x07
     fc0:	98 87       	std	Y+8, r25	; 0x08
     fc2:	a9 87       	std	Y+9, r26	; 0x09
     fc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc6:	6f 81       	ldd	r22, Y+7	; 0x07
     fc8:	78 85       	ldd	r23, Y+8	; 0x08
     fca:	89 85       	ldd	r24, Y+9	; 0x09
     fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e8       	ldi	r20, 0x80	; 128
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fda:	88 23       	and	r24, r24
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <LCD_vInit+0x4b2>
		__ticks = 1;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	3f c0       	rjmp	.+126    	; 0x1066 <LCD_vInit+0x530>
	else if (__tmp > 65535)
     fe8:	6f 81       	ldd	r22, Y+7	; 0x07
     fea:	78 85       	ldd	r23, Y+8	; 0x08
     fec:	89 85       	ldd	r24, Y+9	; 0x09
     fee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	3f ef       	ldi	r19, 0xFF	; 255
     ff4:	4f e7       	ldi	r20, 0x7F	; 127
     ff6:	57 e4       	ldi	r21, 0x47	; 71
     ff8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ffc:	18 16       	cp	r1, r24
     ffe:	4c f5       	brge	.+82     	; 0x1052 <LCD_vInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1000:	6b 85       	ldd	r22, Y+11	; 0x0b
    1002:	7c 85       	ldd	r23, Y+12	; 0x0c
    1004:	8d 85       	ldd	r24, Y+13	; 0x0d
    1006:	9e 85       	ldd	r25, Y+14	; 0x0e
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	bc 01       	movw	r22, r24
    101a:	cd 01       	movw	r24, r26
    101c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9e 83       	std	Y+6, r25	; 0x06
    1026:	8d 83       	std	Y+5, r24	; 0x05
    1028:	0f c0       	rjmp	.+30     	; 0x1048 <LCD_vInit+0x512>
    102a:	88 ec       	ldi	r24, 0xC8	; 200
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9c 83       	std	Y+4, r25	; 0x04
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <LCD_vInit+0x500>
    103a:	9c 83       	std	Y+4, r25	; 0x04
    103c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	69 f7       	brne	.-38     	; 0x102a <LCD_vInit+0x4f4>
    1050:	14 c0       	rjmp	.+40     	; 0x107a <LCD_vInit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1052:	6f 81       	ldd	r22, Y+7	; 0x07
    1054:	78 85       	ldd	r23, Y+8	; 0x08
    1056:	89 85       	ldd	r24, Y+9	; 0x09
    1058:	9a 85       	ldd	r25, Y+10	; 0x0a
    105a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <LCD_vInit+0x53c>
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
    107a:	ca 5b       	subi	r28, 0xBA	; 186
    107c:	df 4f       	sbci	r29, 0xFF	; 255
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <send_falling_edge>:


static void send_falling_edge(void)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	6c 97       	sbiw	r28, 0x1c	; 28
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
	DIO_write('B',EN,1);
    10a6:	82 e4       	ldi	r24, 0x42	; 66
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a0 e0       	ldi	r26, 0x00	; 0
    10b6:	b0 e4       	ldi	r27, 0x40	; 64
    10b8:	89 8f       	std	Y+25, r24	; 0x19
    10ba:	9a 8f       	std	Y+26, r25	; 0x1a
    10bc:	ab 8f       	std	Y+27, r26	; 0x1b
    10be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c0:	69 8d       	ldd	r22, Y+25	; 0x19
    10c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	4a ef       	ldi	r20, 0xFA	; 250
    10ce:	54 e4       	ldi	r21, 0x44	; 68
    10d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	8d 8b       	std	Y+21, r24	; 0x15
    10da:	9e 8b       	std	Y+22, r25	; 0x16
    10dc:	af 8b       	std	Y+23, r26	; 0x17
    10de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10e0:	6d 89       	ldd	r22, Y+21	; 0x15
    10e2:	7e 89       	ldd	r23, Y+22	; 0x16
    10e4:	8f 89       	ldd	r24, Y+23	; 0x17
    10e6:	98 8d       	ldd	r25, Y+24	; 0x18
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	2c f4       	brge	.+10     	; 0x1102 <send_falling_edge+0x70>
		__ticks = 1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
    10fe:	8b 8b       	std	Y+19, r24	; 0x13
    1100:	3f c0       	rjmp	.+126    	; 0x1180 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1102:	6d 89       	ldd	r22, Y+21	; 0x15
    1104:	7e 89       	ldd	r23, Y+22	; 0x16
    1106:	8f 89       	ldd	r24, Y+23	; 0x17
    1108:	98 8d       	ldd	r25, Y+24	; 0x18
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	3f ef       	ldi	r19, 0xFF	; 255
    110e:	4f e7       	ldi	r20, 0x7F	; 127
    1110:	57 e4       	ldi	r21, 0x47	; 71
    1112:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1116:	18 16       	cp	r1, r24
    1118:	4c f5       	brge	.+82     	; 0x116c <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111a:	69 8d       	ldd	r22, Y+25	; 0x19
    111c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    111e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	bc 01       	movw	r22, r24
    1134:	cd 01       	movw	r24, r26
    1136:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	9c 8b       	std	Y+20, r25	; 0x14
    1140:	8b 8b       	std	Y+19, r24	; 0x13
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <send_falling_edge+0xd0>
    1144:	88 ec       	ldi	r24, 0xC8	; 200
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9a 8b       	std	Y+18, r25	; 0x12
    114a:	89 8b       	std	Y+17, r24	; 0x11
    114c:	89 89       	ldd	r24, Y+17	; 0x11
    114e:	9a 89       	ldd	r25, Y+18	; 0x12
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <send_falling_edge+0xbe>
    1154:	9a 8b       	std	Y+18, r25	; 0x12
    1156:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1158:	8b 89       	ldd	r24, Y+19	; 0x13
    115a:	9c 89       	ldd	r25, Y+20	; 0x14
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	9c 8b       	std	Y+20, r25	; 0x14
    1160:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1162:	8b 89       	ldd	r24, Y+19	; 0x13
    1164:	9c 89       	ldd	r25, Y+20	; 0x14
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	69 f7       	brne	.-38     	; 0x1144 <send_falling_edge+0xb2>
    116a:	14 c0       	rjmp	.+40     	; 0x1194 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116c:	6d 89       	ldd	r22, Y+21	; 0x15
    116e:	7e 89       	ldd	r23, Y+22	; 0x16
    1170:	8f 89       	ldd	r24, Y+23	; 0x17
    1172:	98 8d       	ldd	r25, Y+24	; 0x18
    1174:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	9c 8b       	std	Y+20, r25	; 0x14
    117e:	8b 8b       	std	Y+19, r24	; 0x13
    1180:	8b 89       	ldd	r24, Y+19	; 0x13
    1182:	9c 89       	ldd	r25, Y+20	; 0x14
    1184:	98 8b       	std	Y+16, r25	; 0x10
    1186:	8f 87       	std	Y+15, r24	; 0x0f
    1188:	8f 85       	ldd	r24, Y+15	; 0x0f
    118a:	98 89       	ldd	r25, Y+16	; 0x10
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <send_falling_edge+0xfa>
    1190:	98 8b       	std	Y+16, r25	; 0x10
    1192:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('B',EN,0);
    1194:	82 e4       	ldi	r24, 0x42	; 66
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a0 e0       	ldi	r26, 0x00	; 0
    11a4:	b0 e4       	ldi	r27, 0x40	; 64
    11a6:	8b 87       	std	Y+11, r24	; 0x0b
    11a8:	9c 87       	std	Y+12, r25	; 0x0c
    11aa:	ad 87       	std	Y+13, r26	; 0x0d
    11ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	4a ef       	ldi	r20, 0xFA	; 250
    11bc:	54 e4       	ldi	r21, 0x44	; 68
    11be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	8f 83       	std	Y+7, r24	; 0x07
    11c8:	98 87       	std	Y+8, r25	; 0x08
    11ca:	a9 87       	std	Y+9, r26	; 0x09
    11cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ce:	6f 81       	ldd	r22, Y+7	; 0x07
    11d0:	78 85       	ldd	r23, Y+8	; 0x08
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e8       	ldi	r20, 0x80	; 128
    11dc:	5f e3       	ldi	r21, 0x3F	; 63
    11de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11e2:	88 23       	and	r24, r24
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <send_falling_edge+0x15e>
		__ticks = 1;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	9e 83       	std	Y+6, r25	; 0x06
    11ec:	8d 83       	std	Y+5, r24	; 0x05
    11ee:	3f c0       	rjmp	.+126    	; 0x126e <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    11f0:	6f 81       	ldd	r22, Y+7	; 0x07
    11f2:	78 85       	ldd	r23, Y+8	; 0x08
    11f4:	89 85       	ldd	r24, Y+9	; 0x09
    11f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	3f ef       	ldi	r19, 0xFF	; 255
    11fc:	4f e7       	ldi	r20, 0x7F	; 127
    11fe:	57 e4       	ldi	r21, 0x47	; 71
    1200:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1204:	18 16       	cp	r1, r24
    1206:	4c f5       	brge	.+82     	; 0x125a <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1208:	6b 85       	ldd	r22, Y+11	; 0x0b
    120a:	7c 85       	ldd	r23, Y+12	; 0x0c
    120c:	8d 85       	ldd	r24, Y+13	; 0x0d
    120e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e2       	ldi	r20, 0x20	; 32
    1216:	51 e4       	ldi	r21, 0x41	; 65
    1218:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	bc 01       	movw	r22, r24
    1222:	cd 01       	movw	r24, r26
    1224:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <send_falling_edge+0x1be>
    1232:	88 ec       	ldi	r24, 0xC8	; 200
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	8b 83       	std	Y+3, r24	; 0x03
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <send_falling_edge+0x1ac>
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	9e 81       	ldd	r25, Y+6	; 0x06
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	9e 83       	std	Y+6, r25	; 0x06
    124e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	69 f7       	brne	.-38     	; 0x1232 <send_falling_edge+0x1a0>
    1258:	14 c0       	rjmp	.+40     	; 0x1282 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125a:	6f 81       	ldd	r22, Y+7	; 0x07
    125c:	78 85       	ldd	r23, Y+8	; 0x08
    125e:	89 85       	ldd	r24, Y+9	; 0x09
    1260:	9a 85       	ldd	r25, Y+10	; 0x0a
    1262:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <send_falling_edge+0x1e8>
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1282:	6c 96       	adiw	r28, 0x1c	; 28
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	2f 97       	sbiw	r28, 0x0f	; 15
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
    12aa:	81 e4       	ldi	r24, 0x41	; 65
    12ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    12ae:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <DIO_write_port>
	DIO_write('B',RS,0);
    12b2:	82 e4       	ldi	r24, 0x42	; 66
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
	send_falling_edge();
    12bc:	0e 94 49 08 	call	0x1092	; 0x1092 <send_falling_edge>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a0 e8       	ldi	r26, 0x80	; 128
    12c6:	bf e3       	ldi	r27, 0x3F	; 63
    12c8:	8b 87       	std	Y+11, r24	; 0x0b
    12ca:	9c 87       	std	Y+12, r25	; 0x0c
    12cc:	ad 87       	std	Y+13, r26	; 0x0d
    12ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4a ef       	ldi	r20, 0xFA	; 250
    12de:	54 e4       	ldi	r21, 0x44	; 68
    12e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	8f 83       	std	Y+7, r24	; 0x07
    12ea:	98 87       	std	Y+8, r25	; 0x08
    12ec:	a9 87       	std	Y+9, r26	; 0x09
    12ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1304:	88 23       	and	r24, r24
    1306:	2c f4       	brge	.+10     	; 0x1312 <LCD_vSend_cmd+0x7e>
		__ticks = 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	3f c0       	rjmp	.+126    	; 0x1390 <LCD_vSend_cmd+0xfc>
	else if (__tmp > 65535)
    1312:	6f 81       	ldd	r22, Y+7	; 0x07
    1314:	78 85       	ldd	r23, Y+8	; 0x08
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	3f ef       	ldi	r19, 0xFF	; 255
    131e:	4f e7       	ldi	r20, 0x7F	; 127
    1320:	57 e4       	ldi	r21, 0x47	; 71
    1322:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1326:	18 16       	cp	r1, r24
    1328:	4c f5       	brge	.+82     	; 0x137c <LCD_vSend_cmd+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132a:	6b 85       	ldd	r22, Y+11	; 0x0b
    132c:	7c 85       	ldd	r23, Y+12	; 0x0c
    132e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1330:	9e 85       	ldd	r25, Y+14	; 0x0e
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e2       	ldi	r20, 0x20	; 32
    1338:	51 e4       	ldi	r21, 0x41	; 65
    133a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	0f c0       	rjmp	.+30     	; 0x1372 <LCD_vSend_cmd+0xde>
    1354:	88 ec       	ldi	r24, 0xC8	; 200
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <LCD_vSend_cmd+0xcc>
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	69 f7       	brne	.-38     	; 0x1354 <LCD_vSend_cmd+0xc0>
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <LCD_vSend_cmd+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137c:	6f 81       	ldd	r22, Y+7	; 0x07
    137e:	78 85       	ldd	r23, Y+8	; 0x08
    1380:	89 85       	ldd	r24, Y+9	; 0x09
    1382:	9a 85       	ldd	r25, Y+10	; 0x0a
    1384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 83       	std	Y+5, r24	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <LCD_vSend_cmd+0x108>
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
	write_high_nibble('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
    13a4:	2f 96       	adiw	r28, 0x0f	; 15
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	2f 97       	sbiw	r28, 0x0f	; 15
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',data);
    13cc:	81 e4       	ldi	r24, 0x41	; 65
    13ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    13d0:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <DIO_write_port>
	DIO_write('B',RS,1);
    13d4:	82 e4       	ldi	r24, 0x42	; 66
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
	send_falling_edge();
    13de:	0e 94 49 08 	call	0x1092	; 0x1092 <send_falling_edge>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a0 e8       	ldi	r26, 0x80	; 128
    13e8:	bf e3       	ldi	r27, 0x3F	; 63
    13ea:	8b 87       	std	Y+11, r24	; 0x0b
    13ec:	9c 87       	std	Y+12, r25	; 0x0c
    13ee:	ad 87       	std	Y+13, r26	; 0x0d
    13f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	4a ef       	ldi	r20, 0xFA	; 250
    1400:	54 e4       	ldi	r21, 0x44	; 68
    1402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	8f 83       	std	Y+7, r24	; 0x07
    140c:	98 87       	std	Y+8, r25	; 0x08
    140e:	a9 87       	std	Y+9, r26	; 0x09
    1410:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1412:	6f 81       	ldd	r22, Y+7	; 0x07
    1414:	78 85       	ldd	r23, Y+8	; 0x08
    1416:	89 85       	ldd	r24, Y+9	; 0x09
    1418:	9a 85       	ldd	r25, Y+10	; 0x0a
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e8       	ldi	r20, 0x80	; 128
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1426:	88 23       	and	r24, r24
    1428:	2c f4       	brge	.+10     	; 0x1434 <LCD_vSend_char+0x7e>
		__ticks = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	3f c0       	rjmp	.+126    	; 0x14b2 <LCD_vSend_char+0xfc>
	else if (__tmp > 65535)
    1434:	6f 81       	ldd	r22, Y+7	; 0x07
    1436:	78 85       	ldd	r23, Y+8	; 0x08
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	3f ef       	ldi	r19, 0xFF	; 255
    1440:	4f e7       	ldi	r20, 0x7F	; 127
    1442:	57 e4       	ldi	r21, 0x47	; 71
    1444:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1448:	18 16       	cp	r1, r24
    144a:	4c f5       	brge	.+82     	; 0x149e <LCD_vSend_char+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144c:	6b 85       	ldd	r22, Y+11	; 0x0b
    144e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1450:	8d 85       	ldd	r24, Y+13	; 0x0d
    1452:	9e 85       	ldd	r25, Y+14	; 0x0e
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e2       	ldi	r20, 0x20	; 32
    145a:	51 e4       	ldi	r21, 0x41	; 65
    145c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	0f c0       	rjmp	.+30     	; 0x1494 <LCD_vSend_char+0xde>
    1476:	88 ec       	ldi	r24, 0xC8	; 200
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9c 83       	std	Y+4, r25	; 0x04
    147c:	8b 83       	std	Y+3, r24	; 0x03
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCD_vSend_char+0xcc>
    1486:	9c 83       	std	Y+4, r25	; 0x04
    1488:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	69 f7       	brne	.-38     	; 0x1476 <LCD_vSend_char+0xc0>
    149c:	14 c0       	rjmp	.+40     	; 0x14c6 <LCD_vSend_char+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149e:	6f 81       	ldd	r22, Y+7	; 0x07
    14a0:	78 85       	ldd	r23, Y+8	; 0x08
    14a2:	89 85       	ldd	r24, Y+9	; 0x09
    14a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <LCD_vSend_char+0x108>
    14c2:	9a 83       	std	Y+2, r25	; 0x02
    14c4:	89 83       	std	Y+1, r24	; 0x01
	write_high_nibble('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
    14c6:	2f 96       	adiw	r28, 0x0f	; 15
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <LCD_vSend_string+0x6>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	0a c0       	rjmp	.+20     	; 0x14fc <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    14e8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ea:	fa 81       	ldd	r31, Y+2	; 0x02
    14ec:	80 81       	ld	r24, Z
    14ee:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
		data++;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	80 81       	ld	r24, Z
    1502:	88 23       	and	r24, r24
    1504:	89 f7       	brne	.-30     	; 0x14e8 <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <LCD_clearscreen>:
void LCD_clearscreen()
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	2e 97       	sbiw	r28, 0x0e	; 14
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	0e 94 4a 09 	call	0x1294	; 0x1294 <LCD_vSend_cmd>
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a0 e2       	ldi	r26, 0x20	; 32
    1530:	b1 e4       	ldi	r27, 0x41	; 65
    1532:	8b 87       	std	Y+11, r24	; 0x0b
    1534:	9c 87       	std	Y+12, r25	; 0x0c
    1536:	ad 87       	std	Y+13, r26	; 0x0d
    1538:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153a:	6b 85       	ldd	r22, Y+11	; 0x0b
    153c:	7c 85       	ldd	r23, Y+12	; 0x0c
    153e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1540:	9e 85       	ldd	r25, Y+14	; 0x0e
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4a ef       	ldi	r20, 0xFA	; 250
    1548:	54 e4       	ldi	r21, 0x44	; 68
    154a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	8f 83       	std	Y+7, r24	; 0x07
    1554:	98 87       	std	Y+8, r25	; 0x08
    1556:	a9 87       	std	Y+9, r26	; 0x09
    1558:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    155a:	6f 81       	ldd	r22, Y+7	; 0x07
    155c:	78 85       	ldd	r23, Y+8	; 0x08
    155e:	89 85       	ldd	r24, Y+9	; 0x09
    1560:	9a 85       	ldd	r25, Y+10	; 0x0a
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e8       	ldi	r20, 0x80	; 128
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    156e:	88 23       	and	r24, r24
    1570:	2c f4       	brge	.+10     	; 0x157c <LCD_clearscreen+0x6c>
		__ticks = 1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	3f c0       	rjmp	.+126    	; 0x15fa <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    157c:	6f 81       	ldd	r22, Y+7	; 0x07
    157e:	78 85       	ldd	r23, Y+8	; 0x08
    1580:	89 85       	ldd	r24, Y+9	; 0x09
    1582:	9a 85       	ldd	r25, Y+10	; 0x0a
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	3f ef       	ldi	r19, 0xFF	; 255
    1588:	4f e7       	ldi	r20, 0x7F	; 127
    158a:	57 e4       	ldi	r21, 0x47	; 71
    158c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1590:	18 16       	cp	r1, r24
    1592:	4c f5       	brge	.+82     	; 0x15e6 <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1594:	6b 85       	ldd	r22, Y+11	; 0x0b
    1596:	7c 85       	ldd	r23, Y+12	; 0x0c
    1598:	8d 85       	ldd	r24, Y+13	; 0x0d
    159a:	9e 85       	ldd	r25, Y+14	; 0x0e
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e2       	ldi	r20, 0x20	; 32
    15a2:	51 e4       	ldi	r21, 0x41	; 65
    15a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <LCD_clearscreen+0xcc>
    15be:	88 ec       	ldi	r24, 0xC8	; 200
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9c 83       	std	Y+4, r25	; 0x04
    15c4:	8b 83       	std	Y+3, r24	; 0x03
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <LCD_clearscreen+0xba>
    15ce:	9c 83       	std	Y+4, r25	; 0x04
    15d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	9e 81       	ldd	r25, Y+6	; 0x06
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	69 f7       	brne	.-38     	; 0x15be <LCD_clearscreen+0xae>
    15e4:	14 c0       	rjmp	.+40     	; 0x160e <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e6:	6f 81       	ldd	r22, Y+7	; 0x07
    15e8:	78 85       	ldd	r23, Y+8	; 0x08
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	9e 83       	std	Y+6, r25	; 0x06
    15f8:	8d 83       	std	Y+5, r24	; 0x05
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	9a 83       	std	Y+2, r25	; 0x02
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <LCD_clearscreen+0xf6>
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    160e:	2e 96       	adiw	r28, 0x0e	; 14
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	61 97       	sbiw	r28, 0x11	; 17
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	88 8b       	std	Y+16, r24	; 0x10
    1636:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    1638:	88 89       	ldd	r24, Y+16	; 0x10
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	48 f4       	brcc	.+18     	; 0x1650 <LCD_movecursor+0x30>
    163e:	88 89       	ldd	r24, Y+16	; 0x10
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <LCD_movecursor+0x30>
    1644:	89 89       	ldd	r24, Y+17	; 0x11
    1646:	81 31       	cpi	r24, 0x11	; 17
    1648:	18 f4       	brcc	.+6      	; 0x1650 <LCD_movecursor+0x30>
    164a:	89 89       	ldd	r24, Y+17	; 0x11
    164c:	88 23       	and	r24, r24
    164e:	19 f4       	brne	.+6      	; 0x1656 <LCD_movecursor+0x36>
	{
		data=0x80;
    1650:	80 e8       	ldi	r24, 0x80	; 128
    1652:	8f 87       	std	Y+15, r24	; 0x0f
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <LCD_movecursor+0x50>
	}
	else if(row==1)
    1656:	88 89       	ldd	r24, Y+16	; 0x10
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	21 f4       	brne	.+8      	; 0x1664 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    165c:	89 89       	ldd	r24, Y+17	; 0x11
    165e:	81 58       	subi	r24, 0x81	; 129
    1660:	8f 87       	std	Y+15, r24	; 0x0f
    1662:	06 c0       	rjmp	.+12     	; 0x1670 <LCD_movecursor+0x50>
	}
	else if (row==2)
    1664:	88 89       	ldd	r24, Y+16	; 0x10
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	19 f4       	brne	.+6      	; 0x1670 <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    166a:	89 89       	ldd	r24, Y+17	; 0x11
    166c:	81 54       	subi	r24, 0x41	; 65
    166e:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    1670:	8f 85       	ldd	r24, Y+15	; 0x0f
    1672:	0e 94 4a 09 	call	0x1294	; 0x1294 <LCD_vSend_cmd>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e8       	ldi	r26, 0x80	; 128
    167c:	bf e3       	ldi	r27, 0x3F	; 63
    167e:	8b 87       	std	Y+11, r24	; 0x0b
    1680:	9c 87       	std	Y+12, r25	; 0x0c
    1682:	ad 87       	std	Y+13, r26	; 0x0d
    1684:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	6b 85       	ldd	r22, Y+11	; 0x0b
    1688:	7c 85       	ldd	r23, Y+12	; 0x0c
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a ef       	ldi	r20, 0xFA	; 250
    1694:	54 e4       	ldi	r21, 0x44	; 68
    1696:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8f 83       	std	Y+7, r24	; 0x07
    16a0:	98 87       	std	Y+8, r25	; 0x08
    16a2:	a9 87       	std	Y+9, r26	; 0x09
    16a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a6:	6f 81       	ldd	r22, Y+7	; 0x07
    16a8:	78 85       	ldd	r23, Y+8	; 0x08
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <LCD_movecursor+0xa8>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	78 85       	ldd	r23, Y+8	; 0x08
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <LCD_movecursor+0x108>
    170a:	88 ec       	ldi	r24, 0xC8	; 200
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_movecursor+0xf6>
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <LCD_movecursor+0xea>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <LCD_movecursor+0x132>
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    175a:	61 96       	adiw	r28, 0x11	; 17
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <keypad_vInit>:
 * keypad_driver.c

 */ 
 #include "keypad.h"
 void keypad_vInit()
 {
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	 DIO_vsetPINDir('D',0,1);
    1774:	84 e4       	ldi	r24, 0x44	; 68
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,1);
    177e:	84 e4       	ldi	r24, 0x44	; 68
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,1);
    1788:	84 e4       	ldi	r24, 0x44	; 68
    178a:	62 e0       	ldi	r22, 0x02	; 2
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,1);
    1792:	84 e4       	ldi	r24, 0x44	; 68
    1794:	63 e0       	ldi	r22, 0x03	; 3
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',4,0);
    179c:	84 e4       	ldi	r24, 0x44	; 68
    179e:	64 e0       	ldi	r22, 0x04	; 4
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',5,0);
    17a6:	84 e4       	ldi	r24, 0x44	; 68
    17a8:	65 e0       	ldi	r22, 0x05	; 5
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',6,0);
    17b0:	84 e4       	ldi	r24, 0x44	; 68
    17b2:	66 e0       	ldi	r22, 0x06	; 6
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',7,0);
    17ba:	84 e4       	ldi	r24, 0x44	; 68
    17bc:	67 e0       	ldi	r22, 0x07	; 7
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <DIO_vsetPINDir>
	 DIO_vconnectpullup('D',4,1);
    17c4:	84 e4       	ldi	r24, 0x44	; 68
    17c6:	64 e0       	ldi	r22, 0x04	; 4
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',5,1);
    17ce:	84 e4       	ldi	r24, 0x44	; 68
    17d0:	65 e0       	ldi	r22, 0x05	; 5
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',6,1);
    17d8:	84 e4       	ldi	r24, 0x44	; 68
    17da:	66 e0       	ldi	r22, 0x06	; 6
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',7,1);
    17e2:	84 e4       	ldi	r24, 0x44	; 68
    17e4:	67 e0       	ldi	r22, 0x07	; 7
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_vconnectpullup>
	  
 }
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <keypad_u8check_press>:
 char keypad_u8check_press()
 {
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	69 97       	sbiw	r28, 0x19	; 25
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
    1806:	ce 01       	movw	r24, r28
    1808:	05 96       	adiw	r24, 0x05	; 5
    180a:	9e 8b       	std	Y+22, r25	; 0x16
    180c:	8d 8b       	std	Y+21, r24	; 0x15
    180e:	e8 e6       	ldi	r30, 0x68	; 104
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	f8 8f       	std	Y+24, r31	; 0x18
    1814:	ef 8b       	std	Y+23, r30	; 0x17
    1816:	f0 e1       	ldi	r31, 0x10	; 16
    1818:	f9 8f       	std	Y+25, r31	; 0x19
    181a:	ef 89       	ldd	r30, Y+23	; 0x17
    181c:	f8 8d       	ldd	r31, Y+24	; 0x18
    181e:	00 80       	ld	r0, Z
    1820:	8f 89       	ldd	r24, Y+23	; 0x17
    1822:	98 8d       	ldd	r25, Y+24	; 0x18
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	98 8f       	std	Y+24, r25	; 0x18
    1828:	8f 8b       	std	Y+23, r24	; 0x17
    182a:	ed 89       	ldd	r30, Y+21	; 0x15
    182c:	fe 89       	ldd	r31, Y+22	; 0x16
    182e:	00 82       	st	Z, r0
    1830:	8d 89       	ldd	r24, Y+21	; 0x15
    1832:	9e 89       	ldd	r25, Y+22	; 0x16
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	9e 8b       	std	Y+22, r25	; 0x16
    1838:	8d 8b       	std	Y+21, r24	; 0x15
    183a:	99 8d       	ldd	r25, Y+25	; 0x19
    183c:	91 50       	subi	r25, 0x01	; 1
    183e:	99 8f       	std	Y+25, r25	; 0x19
    1840:	e9 8d       	ldd	r30, Y+25	; 0x19
    1842:	ee 23       	and	r30, r30
    1844:	51 f7       	brne	.-44     	; 0x181a <keypad_u8check_press+0x28>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	89 83       	std	Y+1, r24	; 0x01
	 for(row=0;row<4;row++)
    184a:	1c 82       	std	Y+4, r1	; 0x04
    184c:	47 c0       	rjmp	.+142    	; 0x18dc <keypad_u8check_press+0xea>
	 {
	 DIO_write('D',0,1);
    184e:	84 e4       	ldi	r24, 0x44	; 68
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
	 DIO_write('D',1,1);
    1858:	84 e4       	ldi	r24, 0x44	; 68
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
	 DIO_write('D',2,1);
    1862:	84 e4       	ldi	r24, 0x44	; 68
    1864:	62 e0       	ldi	r22, 0x02	; 2
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
	 DIO_write('D',3,1);
    186c:	84 e4       	ldi	r24, 0x44	; 68
    186e:	63 e0       	ldi	r22, 0x03	; 3
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
	 DIO_write('D',row,0);
    1876:	84 e4       	ldi	r24, 0x44	; 68
    1878:	6c 81       	ldd	r22, Y+4	; 0x04
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
    1880:	1b 82       	std	Y+3, r1	; 0x03
    1882:	23 c0       	rjmp	.+70     	; 0x18ca <keypad_u8check_press+0xd8>
		{
		 x=DIO_u8read('D',(coloumn+4));
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	98 2f       	mov	r25, r24
    1888:	9c 5f       	subi	r25, 0xFC	; 252
    188a:	84 e4       	ldi	r24, 0x44	; 68
    188c:	69 2f       	mov	r22, r25
    188e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <DIO_u8read>
    1892:	8a 83       	std	Y+2, r24	; 0x02
		 if(x==0)
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	88 23       	and	r24, r24
    1898:	a9 f4       	brne	.+42     	; 0x18c4 <keypad_u8check_press+0xd2>
			 {
			 returnval=arr[row][coloumn];
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	48 2f       	mov	r20, r24
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	22 0f       	add	r18, r18
    18ac:	33 1f       	adc	r19, r19
    18ae:	ce 01       	movw	r24, r28
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	82 0f       	add	r24, r18
    18b4:	93 1f       	adc	r25, r19
    18b6:	84 0f       	add	r24, r20
    18b8:	95 1f       	adc	r25, r21
    18ba:	fc 01       	movw	r30, r24
    18bc:	34 96       	adiw	r30, 0x04	; 4
    18be:	80 81       	ld	r24, Z
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <keypad_u8check_press+0xde>
	 DIO_write('D',1,1);
	 DIO_write('D',2,1);
	 DIO_write('D',3,1);
	 DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	8b 83       	std	Y+3, r24	; 0x03
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	d0 f2       	brcs	.-76     	; 0x1884 <keypad_u8check_press+0x92>
			 {
			 returnval=arr[row][coloumn];
			 break;
			 }  
		}	
	 if(x==0)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	88 23       	and	r24, r24
    18d4:	39 f0       	breq	.+14     	; 0x18e4 <keypad_u8check_press+0xf2>
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	8c 83       	std	Y+4, r24	; 0x04
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	08 f4       	brcc	.+2      	; 0x18e4 <keypad_u8check_press+0xf2>
    18e2:	b5 cf       	rjmp	.-150    	; 0x184e <keypad_u8check_press+0x5c>
	 if(x==0)
		{
		 break;
		}
	 }	 
	 return returnval ;	 
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
 }
    18e6:	69 96       	adiw	r28, 0x19	; 25
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <DIO_vsetPINDir>:

#include "../LIB/STD_TYPES.h"
#include <avr/io.h>
#include "../LIB/std_macros.h"
void DIO_vsetPINDir(u8 portname,unsigned char pinnumber,u8 direction)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <DIO_vsetPINDir+0x6>
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <DIO_vsetPINDir+0x8>
    1900:	0f 92       	push	r0
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	6a 83       	std	Y+2, r22	; 0x02
    190a:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	3d 83       	std	Y+5, r19	; 0x05
    1914:	2c 83       	std	Y+4, r18	; 0x04
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	9d 81       	ldd	r25, Y+5	; 0x05
    191a:	82 34       	cpi	r24, 0x42	; 66
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <DIO_vsetPINDir+0x2a>
    1920:	44 c0       	rjmp	.+136    	; 0x19aa <DIO_vsetPINDir+0xb2>
    1922:	2c 81       	ldd	r18, Y+4	; 0x04
    1924:	3d 81       	ldd	r19, Y+5	; 0x05
    1926:	23 34       	cpi	r18, 0x43	; 67
    1928:	31 05       	cpc	r19, r1
    192a:	34 f4       	brge	.+12     	; 0x1938 <DIO_vsetPINDir+0x40>
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	9d 81       	ldd	r25, Y+5	; 0x05
    1930:	81 34       	cpi	r24, 0x41	; 65
    1932:	91 05       	cpc	r25, r1
    1934:	71 f0       	breq	.+28     	; 0x1952 <DIO_vsetPINDir+0x5a>
    1936:	bc c0       	rjmp	.+376    	; 0x1ab0 <DIO_vsetPINDir+0x1b8>
    1938:	2c 81       	ldd	r18, Y+4	; 0x04
    193a:	3d 81       	ldd	r19, Y+5	; 0x05
    193c:	23 34       	cpi	r18, 0x43	; 67
    193e:	31 05       	cpc	r19, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <DIO_vsetPINDir+0x4c>
    1942:	5f c0       	rjmp	.+190    	; 0x1a02 <DIO_vsetPINDir+0x10a>
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	9d 81       	ldd	r25, Y+5	; 0x05
    1948:	84 34       	cpi	r24, 0x44	; 68
    194a:	91 05       	cpc	r25, r1
    194c:	09 f4       	brne	.+2      	; 0x1950 <DIO_vsetPINDir+0x58>
    194e:	85 c0       	rjmp	.+266    	; 0x1a5a <DIO_vsetPINDir+0x162>
    1950:	af c0       	rjmp	.+350    	; 0x1ab0 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	a1 f4       	brne	.+40     	; 0x1980 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
    1958:	aa e3       	ldi	r26, 0x3A	; 58
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ea e3       	ldi	r30, 0x3A	; 58
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_vsetPINDir+0x7e>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_vsetPINDir+0x7a>
    197a:	84 2b       	or	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	98 c0       	rjmp	.+304    	; 0x1ab0 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
    1980:	aa e3       	ldi	r26, 0x3A	; 58
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ea e3       	ldi	r30, 0x3A	; 58
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_vsetPINDir+0xa6>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_vsetPINDir+0xa2>
    19a2:	80 95       	com	r24
    19a4:	84 23       	and	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	83 c0       	rjmp	.+262    	; 0x1ab0 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	a1 f4       	brne	.+40     	; 0x19d8 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
    19b0:	a7 e3       	ldi	r26, 0x37	; 55
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e7 e3       	ldi	r30, 0x37	; 55
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_vsetPINDir+0xd6>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_vsetPINDir+0xd2>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	6c c0       	rjmp	.+216    	; 0x1ab0 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
    19d8:	a7 e3       	ldi	r26, 0x37	; 55
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e7 e3       	ldi	r30, 0x37	; 55
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_vsetPINDir+0xfe>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_vsetPINDir+0xfa>
    19fa:	80 95       	com	r24
    19fc:	84 23       	and	r24, r20
    19fe:	8c 93       	st	X, r24
    1a00:	57 c0       	rjmp	.+174    	; 0x1ab0 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	a1 f4       	brne	.+40     	; 0x1a30 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
    1a08:	a4 e3       	ldi	r26, 0x34	; 52
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e4 e3       	ldi	r30, 0x34	; 52
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_vsetPINDir+0x12e>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_vsetPINDir+0x12a>
    1a2a:	84 2b       	or	r24, r20
    1a2c:	8c 93       	st	X, r24
    1a2e:	40 c0       	rjmp	.+128    	; 0x1ab0 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
    1a30:	a4 e3       	ldi	r26, 0x34	; 52
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e4 e3       	ldi	r30, 0x34	; 52
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_vsetPINDir+0x156>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_vsetPINDir+0x152>
    1a52:	80 95       	com	r24
    1a54:	84 23       	and	r24, r20
    1a56:	8c 93       	st	X, r24
    1a58:	2b c0       	rjmp	.+86     	; 0x1ab0 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	a1 f4       	brne	.+40     	; 0x1a88 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
    1a60:	a1 e3       	ldi	r26, 0x31	; 49
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e1 e3       	ldi	r30, 0x31	; 49
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_vsetPINDir+0x186>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <DIO_vsetPINDir+0x182>
    1a82:	84 2b       	or	r24, r20
    1a84:	8c 93       	st	X, r24
    1a86:	14 c0       	rjmp	.+40     	; 0x1ab0 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
    1a88:	a1 e3       	ldi	r26, 0x31	; 49
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e1 e3       	ldi	r30, 0x31	; 49
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	48 2f       	mov	r20, r24
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 2e       	mov	r0, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <DIO_vsetPINDir+0x1ae>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <DIO_vsetPINDir+0x1aa>
    1aaa:	80 95       	com	r24
    1aac:	84 23       	and	r24, r20
    1aae:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <DIO_write>:


void DIO_write(u8 portname,u8 pinnumber,u8 outputvalue)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <DIO_write+0x6>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <DIO_write+0x8>
    1ac8:	0f 92       	push	r0
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	6a 83       	std	Y+2, r22	; 0x02
    1ad2:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	3d 83       	std	Y+5, r19	; 0x05
    1adc:	2c 83       	std	Y+4, r18	; 0x04
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	82 34       	cpi	r24, 0x42	; 66
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <DIO_write+0x2a>
    1ae8:	44 c0       	rjmp	.+136    	; 0x1b72 <DIO_write+0xb2>
    1aea:	2c 81       	ldd	r18, Y+4	; 0x04
    1aec:	3d 81       	ldd	r19, Y+5	; 0x05
    1aee:	23 34       	cpi	r18, 0x43	; 67
    1af0:	31 05       	cpc	r19, r1
    1af2:	34 f4       	brge	.+12     	; 0x1b00 <DIO_write+0x40>
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	9d 81       	ldd	r25, Y+5	; 0x05
    1af8:	81 34       	cpi	r24, 0x41	; 65
    1afa:	91 05       	cpc	r25, r1
    1afc:	71 f0       	breq	.+28     	; 0x1b1a <DIO_write+0x5a>
    1afe:	bc c0       	rjmp	.+376    	; 0x1c78 <DIO_write+0x1b8>
    1b00:	2c 81       	ldd	r18, Y+4	; 0x04
    1b02:	3d 81       	ldd	r19, Y+5	; 0x05
    1b04:	23 34       	cpi	r18, 0x43	; 67
    1b06:	31 05       	cpc	r19, r1
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <DIO_write+0x4c>
    1b0a:	5f c0       	rjmp	.+190    	; 0x1bca <DIO_write+0x10a>
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b10:	84 34       	cpi	r24, 0x44	; 68
    1b12:	91 05       	cpc	r25, r1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <DIO_write+0x58>
    1b16:	85 c0       	rjmp	.+266    	; 0x1c22 <DIO_write+0x162>
    1b18:	af c0       	rjmp	.+350    	; 0x1c78 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	a1 f4       	brne	.+40     	; 0x1b48 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
    1b20:	ab e3       	ldi	r26, 0x3B	; 59
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	eb e3       	ldi	r30, 0x3B	; 59
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 2e       	mov	r0, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <DIO_write+0x7e>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	0a 94       	dec	r0
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <DIO_write+0x7a>
    1b42:	84 2b       	or	r24, r20
    1b44:	8c 93       	st	X, r24
    1b46:	98 c0       	rjmp	.+304    	; 0x1c78 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
    1b48:	ab e3       	ldi	r26, 0x3B	; 59
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	eb e3       	ldi	r30, 0x3B	; 59
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	48 2f       	mov	r20, r24
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 2e       	mov	r0, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <DIO_write+0xa6>
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	0a 94       	dec	r0
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <DIO_write+0xa2>
    1b6a:	80 95       	com	r24
    1b6c:	84 23       	and	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	83 c0       	rjmp	.+262    	; 0x1c78 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	a1 f4       	brne	.+40     	; 0x1ba0 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
    1b78:	a8 e3       	ldi	r26, 0x38	; 56
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e8 e3       	ldi	r30, 0x38	; 56
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_write+0xd6>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_write+0xd2>
    1b9a:	84 2b       	or	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	6c c0       	rjmp	.+216    	; 0x1c78 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
    1ba0:	a8 e3       	ldi	r26, 0x38	; 56
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e8 e3       	ldi	r30, 0x38	; 56
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <DIO_write+0xfe>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <DIO_write+0xfa>
    1bc2:	80 95       	com	r24
    1bc4:	84 23       	and	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	57 c0       	rjmp	.+174    	; 0x1c78 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	a1 f4       	brne	.+40     	; 0x1bf8 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
    1bd0:	a5 e3       	ldi	r26, 0x35	; 53
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e5 e3       	ldi	r30, 0x35	; 53
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <DIO_write+0x12e>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <DIO_write+0x12a>
    1bf2:	84 2b       	or	r24, r20
    1bf4:	8c 93       	st	X, r24
    1bf6:	40 c0       	rjmp	.+128    	; 0x1c78 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
    1bf8:	a5 e3       	ldi	r26, 0x35	; 53
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e5 e3       	ldi	r30, 0x35	; 53
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	48 2f       	mov	r20, r24
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	02 2e       	mov	r0, r18
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <DIO_write+0x156>
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	0a 94       	dec	r0
    1c18:	e2 f7       	brpl	.-8      	; 0x1c12 <DIO_write+0x152>
    1c1a:	80 95       	com	r24
    1c1c:	84 23       	and	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	2b c0       	rjmp	.+86     	; 0x1c78 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	a1 f4       	brne	.+40     	; 0x1c50 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
    1c28:	a2 e3       	ldi	r26, 0x32	; 50
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e2 e3       	ldi	r30, 0x32	; 50
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 2e       	mov	r0, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <DIO_write+0x186>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	0a 94       	dec	r0
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <DIO_write+0x182>
    1c4a:	84 2b       	or	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
    1c50:	a2 e3       	ldi	r26, 0x32	; 50
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e2 e3       	ldi	r30, 0x32	; 50
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_write+0x1ae>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <DIO_write+0x1aa>
    1c72:	80 95       	com	r24
    1c74:	84 23       	and	r24, r20
    1c76:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <DIO_u8read>:


unsigned char DIO_u8read(u8 portname,u8 pinnumber)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <DIO_u8read+0x6>
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <DIO_u8read+0x8>
    1c90:	0f 92       	push	r0
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	8a 83       	std	Y+2, r24	; 0x02
    1c98:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
    1c9a:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	3d 83       	std	Y+5, r19	; 0x05
    1ca4:	2c 83       	std	Y+4, r18	; 0x04
    1ca6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ca8:	5d 81       	ldd	r21, Y+5	; 0x05
    1caa:	42 34       	cpi	r20, 0x42	; 66
    1cac:	51 05       	cpc	r21, r1
    1cae:	b1 f1       	breq	.+108    	; 0x1d1c <DIO_u8read+0x94>
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb4:	83 34       	cpi	r24, 0x43	; 67
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	34 f4       	brge	.+12     	; 0x1cc6 <DIO_u8read+0x3e>
    1cba:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbe:	21 34       	cpi	r18, 0x41	; 65
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	71 f0       	breq	.+28     	; 0x1ce0 <DIO_u8read+0x58>
    1cc4:	84 c0       	rjmp	.+264    	; 0x1dce <DIO_u8read+0x146>
    1cc6:	4c 81       	ldd	r20, Y+4	; 0x04
    1cc8:	5d 81       	ldd	r21, Y+5	; 0x05
    1cca:	43 34       	cpi	r20, 0x43	; 67
    1ccc:	51 05       	cpc	r21, r1
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <DIO_u8read+0x4a>
    1cd0:	43 c0       	rjmp	.+134    	; 0x1d58 <DIO_u8read+0xd0>
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd6:	84 34       	cpi	r24, 0x44	; 68
    1cd8:	91 05       	cpc	r25, r1
    1cda:	09 f4       	brne	.+2      	; 0x1cde <DIO_u8read+0x56>
    1cdc:	5b c0       	rjmp	.+182    	; 0x1d94 <DIO_u8read+0x10c>
    1cde:	77 c0       	rjmp	.+238    	; 0x1dce <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
    1ce0:	e9 e3       	ldi	r30, 0x39	; 57
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_u8read+0x72>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	2a 95       	dec	r18
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <DIO_u8read+0x6e>
    1cfe:	9a 01       	movw	r18, r20
    1d00:	28 23       	and	r18, r24
    1d02:	39 23       	and	r19, r25
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a9 01       	movw	r20, r18
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <DIO_u8read+0x8a>
    1d0e:	55 95       	asr	r21
    1d10:	47 95       	ror	r20
    1d12:	8a 95       	dec	r24
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <DIO_u8read+0x86>
    1d16:	ca 01       	movw	r24, r20
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	59 c0       	rjmp	.+178    	; 0x1dce <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
    1d1c:	e6 e3       	ldi	r30, 0x36	; 54
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_u8read+0xae>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	2a 95       	dec	r18
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <DIO_u8read+0xaa>
    1d3a:	9a 01       	movw	r18, r20
    1d3c:	28 23       	and	r18, r24
    1d3e:	39 23       	and	r19, r25
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a9 01       	movw	r20, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_u8read+0xc6>
    1d4a:	55 95       	asr	r21
    1d4c:	47 95       	ror	r20
    1d4e:	8a 95       	dec	r24
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <DIO_u8read+0xc2>
    1d52:	ca 01       	movw	r24, r20
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	3b c0       	rjmp	.+118    	; 0x1dce <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
    1d58:	e3 e3       	ldi	r30, 0x33	; 51
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_u8read+0xea>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	2a 95       	dec	r18
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_u8read+0xe6>
    1d76:	9a 01       	movw	r18, r20
    1d78:	28 23       	and	r18, r24
    1d7a:	39 23       	and	r19, r25
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	a9 01       	movw	r20, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <DIO_u8read+0x102>
    1d86:	55 95       	asr	r21
    1d88:	47 95       	ror	r20
    1d8a:	8a 95       	dec	r24
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <DIO_u8read+0xfe>
    1d8e:	ca 01       	movw	r24, r20
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	1d c0       	rjmp	.+58     	; 0x1dce <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
    1d94:	e0 e3       	ldi	r30, 0x30	; 48
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_u8read+0x126>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	2a 95       	dec	r18
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <DIO_u8read+0x122>
    1db2:	9a 01       	movw	r18, r20
    1db4:	28 23       	and	r18, r24
    1db6:	39 23       	and	r19, r25
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a9 01       	movw	r20, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_u8read+0x13e>
    1dc2:	55 95       	asr	r21
    1dc4:	47 95       	ror	r20
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_u8read+0x13a>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <DIO_toggle>:
void DIO_toggle(u8 portname,u8 pinnumber)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <DIO_toggle+0x6>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <DIO_toggle+0x8>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	3c 83       	std	Y+4, r19	; 0x04
    1df8:	2b 83       	std	Y+3, r18	; 0x03
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	82 34       	cpi	r24, 0x42	; 66
    1e00:	91 05       	cpc	r25, r1
    1e02:	51 f1       	breq	.+84     	; 0x1e58 <DIO_toggle+0x78>
    1e04:	2b 81       	ldd	r18, Y+3	; 0x03
    1e06:	3c 81       	ldd	r19, Y+4	; 0x04
    1e08:	23 34       	cpi	r18, 0x43	; 67
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	34 f4       	brge	.+12     	; 0x1e1a <DIO_toggle+0x3a>
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	81 34       	cpi	r24, 0x41	; 65
    1e14:	91 05       	cpc	r25, r1
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <DIO_toggle+0x50>
    1e18:	5a c0       	rjmp	.+180    	; 0x1ece <DIO_toggle+0xee>
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	23 34       	cpi	r18, 0x43	; 67
    1e20:	31 05       	cpc	r19, r1
    1e22:	71 f1       	breq	.+92     	; 0x1e80 <DIO_toggle+0xa0>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	84 34       	cpi	r24, 0x44	; 68
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	e9 f1       	breq	.+122    	; 0x1ea8 <DIO_toggle+0xc8>
    1e2e:	4f c0       	rjmp	.+158    	; 0x1ece <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    1e30:	ab e3       	ldi	r26, 0x3B	; 59
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	eb e3       	ldi	r30, 0x3B	; 59
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <DIO_toggle+0x6e>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <DIO_toggle+0x6a>
    1e52:	84 27       	eor	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	3b c0       	rjmp	.+118    	; 0x1ece <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    1e58:	a8 e3       	ldi	r26, 0x38	; 56
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e8 e3       	ldi	r30, 0x38	; 56
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_toggle+0x96>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <DIO_toggle+0x92>
    1e7a:	84 27       	eor	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	27 c0       	rjmp	.+78     	; 0x1ece <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    1e80:	a5 e3       	ldi	r26, 0x35	; 53
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e5 e3       	ldi	r30, 0x35	; 53
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_toggle+0xbe>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_toggle+0xba>
    1ea2:	84 27       	eor	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	13 c0       	rjmp	.+38     	; 0x1ece <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    1ea8:	a2 e3       	ldi	r26, 0x32	; 50
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e2 e3       	ldi	r30, 0x32	; 50
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	48 2f       	mov	r20, r24
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	02 2e       	mov	r0, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <DIO_toggle+0xe6>
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	0a 94       	dec	r0
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <DIO_toggle+0xe2>
    1eca:	84 27       	eor	r24, r20
    1ecc:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <DIO_set_port_direction>:
void DIO_set_port_direction(u8 portname,u8 direction)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <DIO_set_port_direction+0x6>
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <DIO_set_port_direction+0x8>
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	3c 83       	std	Y+4, r19	; 0x04
    1ef4:	2b 83       	std	Y+3, r18	; 0x03
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	82 34       	cpi	r24, 0x42	; 66
    1efc:	91 05       	cpc	r25, r1
    1efe:	d9 f0       	breq	.+54     	; 0x1f36 <DIO_set_port_direction+0x5a>
    1f00:	2b 81       	ldd	r18, Y+3	; 0x03
    1f02:	3c 81       	ldd	r19, Y+4	; 0x04
    1f04:	23 34       	cpi	r18, 0x43	; 67
    1f06:	31 05       	cpc	r19, r1
    1f08:	34 f4       	brge	.+12     	; 0x1f16 <DIO_set_port_direction+0x3a>
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	81 34       	cpi	r24, 0x41	; 65
    1f10:	91 05       	cpc	r25, r1
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <DIO_set_port_direction+0x50>
    1f14:	1e c0       	rjmp	.+60     	; 0x1f52 <DIO_set_port_direction+0x76>
    1f16:	2b 81       	ldd	r18, Y+3	; 0x03
    1f18:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1a:	23 34       	cpi	r18, 0x43	; 67
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	81 f0       	breq	.+32     	; 0x1f40 <DIO_set_port_direction+0x64>
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	84 34       	cpi	r24, 0x44	; 68
    1f26:	91 05       	cpc	r25, r1
    1f28:	81 f0       	breq	.+32     	; 0x1f4a <DIO_set_port_direction+0x6e>
    1f2a:	13 c0       	rjmp	.+38     	; 0x1f52 <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    1f2c:	ea e3       	ldi	r30, 0x3A	; 58
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	80 83       	st	Z, r24
    1f34:	0e c0       	rjmp	.+28     	; 0x1f52 <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    1f36:	e7 e3       	ldi	r30, 0x37	; 55
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	80 83       	st	Z, r24
    1f3e:	09 c0       	rjmp	.+18     	; 0x1f52 <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    1f40:	e4 e3       	ldi	r30, 0x34	; 52
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	80 83       	st	Z, r24
    1f48:	04 c0       	rjmp	.+8      	; 0x1f52 <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    1f4a:	e1 e3       	ldi	r30, 0x31	; 49
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <DIO_write_port>:
void DIO_write_port(u8 portname,u8 portvalue)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <DIO_write_port+0x6>
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <DIO_write_port+0x8>
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	3c 83       	std	Y+4, r19	; 0x04
    1f78:	2b 83       	std	Y+3, r18	; 0x03
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	82 34       	cpi	r24, 0x42	; 66
    1f80:	91 05       	cpc	r25, r1
    1f82:	d9 f0       	breq	.+54     	; 0x1fba <DIO_write_port+0x5a>
    1f84:	2b 81       	ldd	r18, Y+3	; 0x03
    1f86:	3c 81       	ldd	r19, Y+4	; 0x04
    1f88:	23 34       	cpi	r18, 0x43	; 67
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	34 f4       	brge	.+12     	; 0x1f9a <DIO_write_port+0x3a>
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	81 34       	cpi	r24, 0x41	; 65
    1f94:	91 05       	cpc	r25, r1
    1f96:	61 f0       	breq	.+24     	; 0x1fb0 <DIO_write_port+0x50>
    1f98:	1e c0       	rjmp	.+60     	; 0x1fd6 <DIO_write_port+0x76>
    1f9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9e:	23 34       	cpi	r18, 0x43	; 67
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	81 f0       	breq	.+32     	; 0x1fc4 <DIO_write_port+0x64>
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	84 34       	cpi	r24, 0x44	; 68
    1faa:	91 05       	cpc	r25, r1
    1fac:	81 f0       	breq	.+32     	; 0x1fce <DIO_write_port+0x6e>
    1fae:	13 c0       	rjmp	.+38     	; 0x1fd6 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    1fb0:	eb e3       	ldi	r30, 0x3B	; 59
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	80 83       	st	Z, r24
    1fb8:	0e c0       	rjmp	.+28     	; 0x1fd6 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    1fba:	e8 e3       	ldi	r30, 0x38	; 56
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	80 83       	st	Z, r24
    1fc2:	09 c0       	rjmp	.+18     	; 0x1fd6 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    1fc4:	e5 e3       	ldi	r30, 0x35	; 53
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	80 83       	st	Z, r24
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    1fce:	e2 e3       	ldi	r30, 0x32	; 50
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <DIO_read_port>:

unsigned char DIO_read_port(u8 portname)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <DIO_read_port+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <DIO_read_port+0x8>
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    1ff2:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	3c 83       	std	Y+4, r19	; 0x04
    1ffc:	2b 83       	std	Y+3, r18	; 0x03
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	82 34       	cpi	r24, 0x42	; 66
    2004:	91 05       	cpc	r25, r1
    2006:	d9 f0       	breq	.+54     	; 0x203e <DIO_read_port+0x5a>
    2008:	2b 81       	ldd	r18, Y+3	; 0x03
    200a:	3c 81       	ldd	r19, Y+4	; 0x04
    200c:	23 34       	cpi	r18, 0x43	; 67
    200e:	31 05       	cpc	r19, r1
    2010:	34 f4       	brge	.+12     	; 0x201e <DIO_read_port+0x3a>
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	81 34       	cpi	r24, 0x41	; 65
    2018:	91 05       	cpc	r25, r1
    201a:	61 f0       	breq	.+24     	; 0x2034 <DIO_read_port+0x50>
    201c:	1e c0       	rjmp	.+60     	; 0x205a <DIO_read_port+0x76>
    201e:	2b 81       	ldd	r18, Y+3	; 0x03
    2020:	3c 81       	ldd	r19, Y+4	; 0x04
    2022:	23 34       	cpi	r18, 0x43	; 67
    2024:	31 05       	cpc	r19, r1
    2026:	81 f0       	breq	.+32     	; 0x2048 <DIO_read_port+0x64>
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	84 34       	cpi	r24, 0x44	; 68
    202e:	91 05       	cpc	r25, r1
    2030:	81 f0       	breq	.+32     	; 0x2052 <DIO_read_port+0x6e>
    2032:	13 c0       	rjmp	.+38     	; 0x205a <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
    2034:	e9 e3       	ldi	r30, 0x39	; 57
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	0e c0       	rjmp	.+28     	; 0x205a <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
    203e:	e6 e3       	ldi	r30, 0x36	; 54
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	09 c0       	rjmp	.+18     	; 0x205a <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
    2048:	e3 e3       	ldi	r30, 0x33	; 51
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	04 c0       	rjmp	.+8      	; 0x205a <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
    2052:	e0 e3       	ldi	r30, 0x30	; 48
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    205a:	89 81       	ldd	r24, Y+1	; 0x01
}
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <DIO_vconnectpullup+0x6>
    2070:	00 d0       	rcall	.+0      	; 0x2072 <DIO_vconnectpullup+0x8>
    2072:	0f 92       	push	r0
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	6a 83       	std	Y+2, r22	; 0x02
    207c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	3d 83       	std	Y+5, r19	; 0x05
    2086:	2c 83       	std	Y+4, r18	; 0x04
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	9d 81       	ldd	r25, Y+5	; 0x05
    208c:	82 34       	cpi	r24, 0x42	; 66
    208e:	91 05       	cpc	r25, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <DIO_vconnectpullup+0x2a>
    2092:	44 c0       	rjmp	.+136    	; 0x211c <DIO_vconnectpullup+0xb2>
    2094:	2c 81       	ldd	r18, Y+4	; 0x04
    2096:	3d 81       	ldd	r19, Y+5	; 0x05
    2098:	23 34       	cpi	r18, 0x43	; 67
    209a:	31 05       	cpc	r19, r1
    209c:	34 f4       	brge	.+12     	; 0x20aa <DIO_vconnectpullup+0x40>
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	81 34       	cpi	r24, 0x41	; 65
    20a4:	91 05       	cpc	r25, r1
    20a6:	71 f0       	breq	.+28     	; 0x20c4 <DIO_vconnectpullup+0x5a>
    20a8:	bc c0       	rjmp	.+376    	; 0x2222 <DIO_vconnectpullup+0x1b8>
    20aa:	2c 81       	ldd	r18, Y+4	; 0x04
    20ac:	3d 81       	ldd	r19, Y+5	; 0x05
    20ae:	23 34       	cpi	r18, 0x43	; 67
    20b0:	31 05       	cpc	r19, r1
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <DIO_vconnectpullup+0x4c>
    20b4:	5f c0       	rjmp	.+190    	; 0x2174 <DIO_vconnectpullup+0x10a>
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	84 34       	cpi	r24, 0x44	; 68
    20bc:	91 05       	cpc	r25, r1
    20be:	09 f4       	brne	.+2      	; 0x20c2 <DIO_vconnectpullup+0x58>
    20c0:	85 c0       	rjmp	.+266    	; 0x21cc <DIO_vconnectpullup+0x162>
    20c2:	af c0       	rjmp	.+350    	; 0x2222 <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	81 30       	cpi	r24, 0x01	; 1
    20c8:	a1 f4       	brne	.+40     	; 0x20f2 <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    20ca:	ab e3       	ldi	r26, 0x3B	; 59
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	eb e3       	ldi	r30, 0x3B	; 59
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	48 2f       	mov	r20, r24
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 2e       	mov	r0, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <DIO_vconnectpullup+0x7e>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	0a 94       	dec	r0
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <DIO_vconnectpullup+0x7a>
    20ec:	84 2b       	or	r24, r20
    20ee:	8c 93       	st	X, r24
    20f0:	98 c0       	rjmp	.+304    	; 0x2222 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    20f2:	ab e3       	ldi	r26, 0x3B	; 59
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	eb e3       	ldi	r30, 0x3B	; 59
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	48 2f       	mov	r20, r24
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	02 2e       	mov	r0, r18
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <DIO_vconnectpullup+0xa6>
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	0a 94       	dec	r0
    2112:	e2 f7       	brpl	.-8      	; 0x210c <DIO_vconnectpullup+0xa2>
    2114:	80 95       	com	r24
    2116:	84 23       	and	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	83 c0       	rjmp	.+262    	; 0x2222 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	a1 f4       	brne	.+40     	; 0x214a <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    2122:	a8 e3       	ldi	r26, 0x38	; 56
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e8 e3       	ldi	r30, 0x38	; 56
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	48 2f       	mov	r20, r24
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	02 2e       	mov	r0, r18
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <DIO_vconnectpullup+0xd6>
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	0a 94       	dec	r0
    2142:	e2 f7       	brpl	.-8      	; 0x213c <DIO_vconnectpullup+0xd2>
    2144:	84 2b       	or	r24, r20
    2146:	8c 93       	st	X, r24
    2148:	6c c0       	rjmp	.+216    	; 0x2222 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    214a:	a8 e3       	ldi	r26, 0x38	; 56
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e8 e3       	ldi	r30, 0x38	; 56
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	48 2f       	mov	r20, r24
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	02 2e       	mov	r0, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <DIO_vconnectpullup+0xfe>
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <DIO_vconnectpullup+0xfa>
    216c:	80 95       	com	r24
    216e:	84 23       	and	r24, r20
    2170:	8c 93       	st	X, r24
    2172:	57 c0       	rjmp	.+174    	; 0x2222 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	a1 f4       	brne	.+40     	; 0x21a2 <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    217a:	a5 e3       	ldi	r26, 0x35	; 53
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	e5 e3       	ldi	r30, 0x35	; 53
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	48 2f       	mov	r20, r24
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_vconnectpullup+0x12e>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_vconnectpullup+0x12a>
    219c:	84 2b       	or	r24, r20
    219e:	8c 93       	st	X, r24
    21a0:	40 c0       	rjmp	.+128    	; 0x2222 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    21a2:	a5 e3       	ldi	r26, 0x35	; 53
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e5 e3       	ldi	r30, 0x35	; 53
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	48 2f       	mov	r20, r24
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 2e       	mov	r0, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <DIO_vconnectpullup+0x156>
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	0a 94       	dec	r0
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <DIO_vconnectpullup+0x152>
    21c4:	80 95       	com	r24
    21c6:	84 23       	and	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	2b c0       	rjmp	.+86     	; 0x2222 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	a1 f4       	brne	.+40     	; 0x21fa <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    21d2:	a2 e3       	ldi	r26, 0x32	; 50
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e2 e3       	ldi	r30, 0x32	; 50
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	48 2f       	mov	r20, r24
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 2e       	mov	r0, r18
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <DIO_vconnectpullup+0x186>
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	0a 94       	dec	r0
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <DIO_vconnectpullup+0x182>
    21f4:	84 2b       	or	r24, r20
    21f6:	8c 93       	st	X, r24
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    21fa:	a2 e3       	ldi	r26, 0x32	; 50
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e2 e3       	ldi	r30, 0x32	; 50
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	48 2f       	mov	r20, r24
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 2e       	mov	r0, r18
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <DIO_vconnectpullup+0x1ae>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	0a 94       	dec	r0
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <DIO_vconnectpullup+0x1aa>
    221c:	80 95       	com	r24
    221e:	84 23       	and	r24, r20
    2220:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <write_low_nibble>:

void write_low_nibble(u8 portname,u8 value)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <write_low_nibble+0x6>
    2238:	00 d0       	rcall	.+0      	; 0x223a <write_low_nibble+0x8>
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	8f 70       	andi	r24, 0x0F	; 15
    2246:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	3c 83       	std	Y+4, r19	; 0x04
    2250:	2b 83       	std	Y+3, r18	; 0x03
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	82 34       	cpi	r24, 0x42	; 66
    2258:	91 05       	cpc	r25, r1
    225a:	31 f1       	breq	.+76     	; 0x22a8 <write_low_nibble+0x76>
    225c:	2b 81       	ldd	r18, Y+3	; 0x03
    225e:	3c 81       	ldd	r19, Y+4	; 0x04
    2260:	23 34       	cpi	r18, 0x43	; 67
    2262:	31 05       	cpc	r19, r1
    2264:	34 f4       	brge	.+12     	; 0x2272 <write_low_nibble+0x40>
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	81 34       	cpi	r24, 0x41	; 65
    226c:	91 05       	cpc	r25, r1
    226e:	61 f0       	breq	.+24     	; 0x2288 <write_low_nibble+0x56>
    2270:	4a c0       	rjmp	.+148    	; 0x2306 <write_low_nibble+0xd4>
    2272:	2b 81       	ldd	r18, Y+3	; 0x03
    2274:	3c 81       	ldd	r19, Y+4	; 0x04
    2276:	23 34       	cpi	r18, 0x43	; 67
    2278:	31 05       	cpc	r19, r1
    227a:	31 f1       	breq	.+76     	; 0x22c8 <write_low_nibble+0x96>
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	84 34       	cpi	r24, 0x44	; 68
    2282:	91 05       	cpc	r25, r1
    2284:	89 f1       	breq	.+98     	; 0x22e8 <write_low_nibble+0xb6>
    2286:	3f c0       	rjmp	.+126    	; 0x2306 <write_low_nibble+0xd4>
	{
		case 'A':
		PORTA&=0xf0;
    2288:	ab e3       	ldi	r26, 0x3B	; 59
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	eb e3       	ldi	r30, 0x3B	; 59
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	80 7f       	andi	r24, 0xF0	; 240
    2294:	8c 93       	st	X, r24
		PORTA|=value;
    2296:	ab e3       	ldi	r26, 0x3B	; 59
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	eb e3       	ldi	r30, 0x3B	; 59
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	90 81       	ld	r25, Z
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	89 2b       	or	r24, r25
    22a4:	8c 93       	st	X, r24
    22a6:	2f c0       	rjmp	.+94     	; 0x2306 <write_low_nibble+0xd4>
		break;

		case 'B':
		PORTB&=0xf0;
    22a8:	a8 e3       	ldi	r26, 0x38	; 56
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e8 e3       	ldi	r30, 0x38	; 56
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 7f       	andi	r24, 0xF0	; 240
    22b4:	8c 93       	st	X, r24
		PORTB|=value;
    22b6:	a8 e3       	ldi	r26, 0x38	; 56
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e8 e3       	ldi	r30, 0x38	; 56
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	90 81       	ld	r25, Z
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	89 2b       	or	r24, r25
    22c4:	8c 93       	st	X, r24
    22c6:	1f c0       	rjmp	.+62     	; 0x2306 <write_low_nibble+0xd4>
		break;

		case 'C':
		PORTC&=0xf0;
    22c8:	a5 e3       	ldi	r26, 0x35	; 53
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e5 e3       	ldi	r30, 0x35	; 53
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	80 7f       	andi	r24, 0xF0	; 240
    22d4:	8c 93       	st	X, r24
		PORTC|=value;
    22d6:	a5 e3       	ldi	r26, 0x35	; 53
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e5 e3       	ldi	r30, 0x35	; 53
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	90 81       	ld	r25, Z
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	89 2b       	or	r24, r25
    22e4:	8c 93       	st	X, r24
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <write_low_nibble+0xd4>
		break;

		case 'D':
		PORTD&=0xf0;
    22e8:	a2 e3       	ldi	r26, 0x32	; 50
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e2 e3       	ldi	r30, 0x32	; 50
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	80 7f       	andi	r24, 0xF0	; 240
    22f4:	8c 93       	st	X, r24
		PORTD|=value;
    22f6:	a2 e3       	ldi	r26, 0x32	; 50
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e2 e3       	ldi	r30, 0x32	; 50
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	90 81       	ld	r25, Z
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	89 2b       	or	r24, r25
    2304:	8c 93       	st	X, r24
		break;

	}
}
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <write_high_nibble+0x6>
    231a:	00 d0       	rcall	.+0      	; 0x231c <write_high_nibble+0x8>
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	82 95       	swap	r24
    2328:	80 7f       	andi	r24, 0xF0	; 240
    232a:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	3c 83       	std	Y+4, r19	; 0x04
    2334:	2b 83       	std	Y+3, r18	; 0x03
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	82 34       	cpi	r24, 0x42	; 66
    233c:	91 05       	cpc	r25, r1
    233e:	31 f1       	breq	.+76     	; 0x238c <write_high_nibble+0x78>
    2340:	2b 81       	ldd	r18, Y+3	; 0x03
    2342:	3c 81       	ldd	r19, Y+4	; 0x04
    2344:	23 34       	cpi	r18, 0x43	; 67
    2346:	31 05       	cpc	r19, r1
    2348:	34 f4       	brge	.+12     	; 0x2356 <write_high_nibble+0x42>
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	81 34       	cpi	r24, 0x41	; 65
    2350:	91 05       	cpc	r25, r1
    2352:	61 f0       	breq	.+24     	; 0x236c <write_high_nibble+0x58>
    2354:	4a c0       	rjmp	.+148    	; 0x23ea <write_high_nibble+0xd6>
    2356:	2b 81       	ldd	r18, Y+3	; 0x03
    2358:	3c 81       	ldd	r19, Y+4	; 0x04
    235a:	23 34       	cpi	r18, 0x43	; 67
    235c:	31 05       	cpc	r19, r1
    235e:	31 f1       	breq	.+76     	; 0x23ac <write_high_nibble+0x98>
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	84 34       	cpi	r24, 0x44	; 68
    2366:	91 05       	cpc	r25, r1
    2368:	89 f1       	breq	.+98     	; 0x23cc <write_high_nibble+0xb8>
    236a:	3f c0       	rjmp	.+126    	; 0x23ea <write_high_nibble+0xd6>
	{
		case 'A':
		PORTA&=0x0f;
    236c:	ab e3       	ldi	r26, 0x3B	; 59
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	eb e3       	ldi	r30, 0x3B	; 59
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	8f 70       	andi	r24, 0x0F	; 15
    2378:	8c 93       	st	X, r24
		PORTA|=value;
    237a:	ab e3       	ldi	r26, 0x3B	; 59
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	eb e3       	ldi	r30, 0x3B	; 59
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	90 81       	ld	r25, Z
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	89 2b       	or	r24, r25
    2388:	8c 93       	st	X, r24
    238a:	2f c0       	rjmp	.+94     	; 0x23ea <write_high_nibble+0xd6>
		break;

		case 'B':
		PORTB&=0x0f;
    238c:	a8 e3       	ldi	r26, 0x38	; 56
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e8 e3       	ldi	r30, 0x38	; 56
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	8f 70       	andi	r24, 0x0F	; 15
    2398:	8c 93       	st	X, r24
		PORTB|=value;
    239a:	a8 e3       	ldi	r26, 0x38	; 56
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e8 e3       	ldi	r30, 0x38	; 56
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	90 81       	ld	r25, Z
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	89 2b       	or	r24, r25
    23a8:	8c 93       	st	X, r24
    23aa:	1f c0       	rjmp	.+62     	; 0x23ea <write_high_nibble+0xd6>
		break;

		case 'C':
		PORTC&=0x0f;
    23ac:	a5 e3       	ldi	r26, 0x35	; 53
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e5 e3       	ldi	r30, 0x35	; 53
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 70       	andi	r24, 0x0F	; 15
    23b8:	8c 93       	st	X, r24
		PORTC|=value;
    23ba:	a5 e3       	ldi	r26, 0x35	; 53
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e5 e3       	ldi	r30, 0x35	; 53
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	90 81       	ld	r25, Z
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	89 2b       	or	r24, r25
    23c8:	8c 93       	st	X, r24
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <write_high_nibble+0xd6>
		break;

		case 'D':
		PORTD&=0x0f;
    23cc:	a2 e3       	ldi	r26, 0x32	; 50
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e2 e3       	ldi	r30, 0x32	; 50
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8f 70       	andi	r24, 0x0F	; 15
    23d8:	8c 93       	st	X, r24
		PORTD|=value;
    23da:	a2 e3       	ldi	r26, 0x32	; 50
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e2 e3       	ldi	r30, 0x32	; 50
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	90 81       	ld	r25, Z
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	89 2b       	or	r24, r25
    23e8:	8c 93       	st	X, r24
		break;

	}
}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <main>:

 */ 

#include "main.h"
int main(void)
{
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	c4 56       	subi	r28, 0x64	; 100
    2406:	d0 40       	sbci	r29, 0x00	; 0
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
	label:	LCD_vInit();
    2412:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_vInit>
	keypad_vInit();
    2416:	0e 94 b6 0b 	call	0x176c	; 0x176c <keypad_vInit>
	u8 arr[6]={NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED} ;
    241a:	ce 01       	movw	r24, r28
    241c:	88 5a       	subi	r24, 0xA8	; 168
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	a2 96       	adiw	r28, 0x22	; 34
    2422:	9f af       	std	Y+63, r25	; 0x3f
    2424:	8e af       	std	Y+62, r24	; 0x3e
    2426:	a2 97       	sbiw	r28, 0x22	; 34
    2428:	28 e7       	ldi	r18, 0x78	; 120
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	a4 96       	adiw	r28, 0x24	; 36
    242e:	3f af       	std	Y+63, r19	; 0x3f
    2430:	2e af       	std	Y+62, r18	; 0x3e
    2432:	a4 97       	sbiw	r28, 0x24	; 36
    2434:	36 e0       	ldi	r19, 0x06	; 6
    2436:	a5 96       	adiw	r28, 0x25	; 37
    2438:	3f af       	std	Y+63, r19	; 0x3f
    243a:	a5 97       	sbiw	r28, 0x25	; 37
    243c:	a4 96       	adiw	r28, 0x24	; 36
    243e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2440:	ff ad       	ldd	r31, Y+63	; 0x3f
    2442:	a4 97       	sbiw	r28, 0x24	; 36
    2444:	00 80       	ld	r0, Z
    2446:	a4 96       	adiw	r28, 0x24	; 36
    2448:	2e ad       	ldd	r18, Y+62	; 0x3e
    244a:	3f ad       	ldd	r19, Y+63	; 0x3f
    244c:	a4 97       	sbiw	r28, 0x24	; 36
    244e:	2f 5f       	subi	r18, 0xFF	; 255
    2450:	3f 4f       	sbci	r19, 0xFF	; 255
    2452:	a4 96       	adiw	r28, 0x24	; 36
    2454:	3f af       	std	Y+63, r19	; 0x3f
    2456:	2e af       	std	Y+62, r18	; 0x3e
    2458:	a4 97       	sbiw	r28, 0x24	; 36
    245a:	a2 96       	adiw	r28, 0x22	; 34
    245c:	ee ad       	ldd	r30, Y+62	; 0x3e
    245e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2460:	a2 97       	sbiw	r28, 0x22	; 34
    2462:	00 82       	st	Z, r0
    2464:	a2 96       	adiw	r28, 0x22	; 34
    2466:	2e ad       	ldd	r18, Y+62	; 0x3e
    2468:	3f ad       	ldd	r19, Y+63	; 0x3f
    246a:	a2 97       	sbiw	r28, 0x22	; 34
    246c:	2f 5f       	subi	r18, 0xFF	; 255
    246e:	3f 4f       	sbci	r19, 0xFF	; 255
    2470:	a2 96       	adiw	r28, 0x22	; 34
    2472:	3f af       	std	Y+63, r19	; 0x3f
    2474:	2e af       	std	Y+62, r18	; 0x3e
    2476:	a2 97       	sbiw	r28, 0x22	; 34
    2478:	a5 96       	adiw	r28, 0x25	; 37
    247a:	3f ad       	ldd	r19, Y+63	; 0x3f
    247c:	a5 97       	sbiw	r28, 0x25	; 37
    247e:	31 50       	subi	r19, 0x01	; 1
    2480:	a5 96       	adiw	r28, 0x25	; 37
    2482:	3f af       	std	Y+63, r19	; 0x3f
    2484:	a5 97       	sbiw	r28, 0x25	; 37
    2486:	a5 96       	adiw	r28, 0x25	; 37
    2488:	8f ad       	ldd	r24, Y+63	; 0x3f
    248a:	a5 97       	sbiw	r28, 0x25	; 37
    248c:	88 23       	and	r24, r24
    248e:	b1 f6       	brne	.-84     	; 0x243c <main+0x44>
	u16 res ;
u8 counter=0 ;
    2490:	fe 01       	movw	r30, r28
    2492:	eb 5a       	subi	r30, 0xAB	; 171
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	10 82       	st	Z, r1
while(1)
{
	do
	{
		arr[counter]=keypad_u8check_press();
    2498:	fe 01       	movw	r30, r28
    249a:	eb 5a       	subi	r30, 0xAB	; 171
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	80 81       	ld	r24, Z
    24a0:	08 2f       	mov	r16, r24
    24a2:	10 e0       	ldi	r17, 0x00	; 0
    24a4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <keypad_u8check_press>
    24a8:	28 2f       	mov	r18, r24
    24aa:	ce 01       	movw	r24, r28
    24ac:	88 5a       	subi	r24, 0xA8	; 168
    24ae:	9f 4f       	sbci	r25, 0xFF	; 255
    24b0:	fc 01       	movw	r30, r24
    24b2:	e0 0f       	add	r30, r16
    24b4:	f1 1f       	adc	r31, r17
    24b6:	20 83       	st	Z, r18
		
	} while(arr[counter]==NOTPRESSED);
    24b8:	fe 01       	movw	r30, r28
    24ba:	eb 5a       	subi	r30, 0xAB	; 171
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 81       	ld	r24, Z
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	ce 01       	movw	r24, r28
    24c6:	88 5a       	subi	r24, 0xA8	; 168
    24c8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ca:	fc 01       	movw	r30, r24
    24cc:	e2 0f       	add	r30, r18
    24ce:	f3 1f       	adc	r31, r19
    24d0:	80 81       	ld	r24, Z
    24d2:	8f 3f       	cpi	r24, 0xFF	; 255
    24d4:	09 f3       	breq	.-62     	; 0x2498 <main+0xa0>
	if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
    24d6:	fe 01       	movw	r30, r28
    24d8:	eb 5a       	subi	r30, 0xAB	; 171
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	ce 01       	movw	r24, r28
    24e4:	88 5a       	subi	r24, 0xA8	; 168
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	fc 01       	movw	r30, r24
    24ea:	e2 0f       	add	r30, r18
    24ec:	f3 1f       	adc	r31, r19
    24ee:	80 81       	ld	r24, Z
    24f0:	81 34       	cpi	r24, 0x41	; 65
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <main+0xfe>
    24f4:	4b c0       	rjmp	.+150    	; 0x258c <main+0x194>
    24f6:	fe 01       	movw	r30, r28
    24f8:	eb 5a       	subi	r30, 0xAB	; 171
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	ce 01       	movw	r24, r28
    2504:	88 5a       	subi	r24, 0xA8	; 168
    2506:	9f 4f       	sbci	r25, 0xFF	; 255
    2508:	fc 01       	movw	r30, r24
    250a:	e2 0f       	add	r30, r18
    250c:	f3 1f       	adc	r31, r19
    250e:	80 81       	ld	r24, Z
    2510:	8d 33       	cpi	r24, 0x3D	; 61
    2512:	e1 f1       	breq	.+120    	; 0x258c <main+0x194>
    2514:	fe 01       	movw	r30, r28
    2516:	eb 5a       	subi	r30, 0xAB	; 171
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	ce 01       	movw	r24, r28
    2522:	88 5a       	subi	r24, 0xA8	; 168
    2524:	9f 4f       	sbci	r25, 0xFF	; 255
    2526:	fc 01       	movw	r30, r24
    2528:	e2 0f       	add	r30, r18
    252a:	f3 1f       	adc	r31, r19
    252c:	80 81       	ld	r24, Z
    252e:	8b 32       	cpi	r24, 0x2B	; 43
    2530:	69 f1       	breq	.+90     	; 0x258c <main+0x194>
    2532:	fe 01       	movw	r30, r28
    2534:	eb 5a       	subi	r30, 0xAB	; 171
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	ce 01       	movw	r24, r28
    2540:	88 5a       	subi	r24, 0xA8	; 168
    2542:	9f 4f       	sbci	r25, 0xFF	; 255
    2544:	fc 01       	movw	r30, r24
    2546:	e2 0f       	add	r30, r18
    2548:	f3 1f       	adc	r31, r19
    254a:	80 81       	ld	r24, Z
    254c:	8d 32       	cpi	r24, 0x2D	; 45
    254e:	f1 f0       	breq	.+60     	; 0x258c <main+0x194>
    2550:	fe 01       	movw	r30, r28
    2552:	eb 5a       	subi	r30, 0xAB	; 171
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	ce 01       	movw	r24, r28
    255e:	88 5a       	subi	r24, 0xA8	; 168
    2560:	9f 4f       	sbci	r25, 0xFF	; 255
    2562:	fc 01       	movw	r30, r24
    2564:	e2 0f       	add	r30, r18
    2566:	f3 1f       	adc	r31, r19
    2568:	80 81       	ld	r24, Z
    256a:	8a 32       	cpi	r24, 0x2A	; 42
    256c:	79 f0       	breq	.+30     	; 0x258c <main+0x194>
    256e:	fe 01       	movw	r30, r28
    2570:	eb 5a       	subi	r30, 0xAB	; 171
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	ce 01       	movw	r24, r28
    257c:	88 5a       	subi	r24, 0xA8	; 168
    257e:	9f 4f       	sbci	r25, 0xFF	; 255
    2580:	fc 01       	movw	r30, r24
    2582:	e2 0f       	add	r30, r18
    2584:	f3 1f       	adc	r31, r19
    2586:	80 81       	ld	r24, Z
    2588:	8f 32       	cpi	r24, 0x2F	; 47
    258a:	19 f4       	brne	.+6      	; 0x2592 <main+0x19a>
	{
		LCD_clearscreen();
    258c:	0e 94 88 0a 	call	0x1510	; 0x1510 <LCD_clearscreen>
    2590:	40 cf       	rjmp	.-384    	; 0x2412 <main+0x1a>
		goto label ;
	}
	else
	{
		LCD_vSend_char(arr[counter]);
    2592:	fe 01       	movw	r30, r28
    2594:	eb 5a       	subi	r30, 0xAB	; 171
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	ce 01       	movw	r24, r28
    25a0:	88 5a       	subi	r24, 0xA8	; 168
    25a2:	9f 4f       	sbci	r25, 0xFF	; 255
    25a4:	fc 01       	movw	r30, r24
    25a6:	e2 0f       	add	r30, r18
    25a8:	f3 1f       	adc	r31, r19
    25aa:	80 81       	ld	r24, Z
    25ac:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
	}
	counter++;
    25b0:	de 01       	movw	r26, r28
    25b2:	ab 5a       	subi	r26, 0xAB	; 171
    25b4:	bf 4f       	sbci	r27, 0xFF	; 255
    25b6:	fe 01       	movw	r30, r28
    25b8:	eb 5a       	subi	r30, 0xAB	; 171
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	8f 5f       	subi	r24, 0xFF	; 255
    25c0:	8c 93       	st	X, r24
    25c2:	fe 01       	movw	r30, r28
    25c4:	ef 5a       	subi	r30, 0xAF	; 175
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a6 e9       	ldi	r26, 0x96	; 150
    25ce:	b3 e4       	ldi	r27, 0x43	; 67
    25d0:	80 83       	st	Z, r24
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	a2 83       	std	Z+2, r26	; 0x02
    25d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	8e 01       	movw	r16, r28
    25da:	03 5b       	subi	r16, 0xB3	; 179
    25dc:	1f 4f       	sbci	r17, 0xFF	; 255
    25de:	fe 01       	movw	r30, r28
    25e0:	ef 5a       	subi	r30, 0xAF	; 175
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	60 81       	ld	r22, Z
    25e6:	71 81       	ldd	r23, Z+1	; 0x01
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a ef       	ldi	r20, 0xFA	; 250
    25f2:	54 e4       	ldi	r21, 0x44	; 68
    25f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	f8 01       	movw	r30, r16
    25fe:	80 83       	st	Z, r24
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	a2 83       	std	Z+2, r26	; 0x02
    2604:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2606:	fe 01       	movw	r30, r28
    2608:	e3 5b       	subi	r30, 0xB3	; 179
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	44 f4       	brge	.+16     	; 0x2634 <main+0x23c>
		__ticks = 1;
    2624:	fe 01       	movw	r30, r28
    2626:	e5 5b       	subi	r30, 0xB5	; 181
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
    2632:	64 c0       	rjmp	.+200    	; 0x26fc <main+0x304>
	else if (__tmp > 65535)
    2634:	fe 01       	movw	r30, r28
    2636:	e3 5b       	subi	r30, 0xB3	; 179
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	0c f0       	brlt	.+2      	; 0x2654 <main+0x25c>
    2652:	43 c0       	rjmp	.+134    	; 0x26da <main+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2654:	fe 01       	movw	r30, r28
    2656:	ef 5a       	subi	r30, 0xAF	; 175
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	8e 01       	movw	r16, r28
    2674:	05 5b       	subi	r16, 0xB5	; 181
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	f8 01       	movw	r30, r16
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	80 83       	st	Z, r24
    268a:	1f c0       	rjmp	.+62     	; 0x26ca <main+0x2d2>
    268c:	fe 01       	movw	r30, r28
    268e:	e7 5b       	subi	r30, 0xB7	; 183
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	88 ec       	ldi	r24, 0xC8	; 200
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	fe 01       	movw	r30, r28
    269c:	e7 5b       	subi	r30, 0xB7	; 183
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <main+0x2ac>
    26a8:	fe 01       	movw	r30, r28
    26aa:	e7 5b       	subi	r30, 0xB7	; 183
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	de 01       	movw	r26, r28
    26b4:	a5 5b       	subi	r26, 0xB5	; 181
    26b6:	bf 4f       	sbci	r27, 0xFF	; 255
    26b8:	fe 01       	movw	r30, r28
    26ba:	e5 5b       	subi	r30, 0xB5	; 181
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	11 96       	adiw	r26, 0x01	; 1
    26c6:	9c 93       	st	X, r25
    26c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ca:	fe 01       	movw	r30, r28
    26cc:	e5 5b       	subi	r30, 0xB5	; 181
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	d1 f6       	brne	.-76     	; 0x268c <main+0x294>
    26d8:	27 c0       	rjmp	.+78     	; 0x2728 <main+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26da:	8e 01       	movw	r16, r28
    26dc:	05 5b       	subi	r16, 0xB5	; 181
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	fe 01       	movw	r30, r28
    26e2:	e3 5b       	subi	r30, 0xB3	; 179
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	60 81       	ld	r22, Z
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	f8 01       	movw	r30, r16
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	de 01       	movw	r26, r28
    26fe:	a9 5b       	subi	r26, 0xB9	; 185
    2700:	bf 4f       	sbci	r27, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	e5 5b       	subi	r30, 0xB5	; 181
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	8d 93       	st	X+, r24
    270e:	9c 93       	st	X, r25
    2710:	fe 01       	movw	r30, r28
    2712:	e9 5b       	subi	r30, 0xB9	; 185
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <main+0x322>
    271e:	fe 01       	movw	r30, r28
    2720:	e9 5b       	subi	r30, 0xB9	; 185
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
	_delay_ms(300);
	do
	{
		arr[counter]=keypad_u8check_press();
    2728:	fe 01       	movw	r30, r28
    272a:	eb 5a       	subi	r30, 0xAB	; 171
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	08 2f       	mov	r16, r24
    2732:	10 e0       	ldi	r17, 0x00	; 0
    2734:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <keypad_u8check_press>
    2738:	28 2f       	mov	r18, r24
    273a:	ce 01       	movw	r24, r28
    273c:	88 5a       	subi	r24, 0xA8	; 168
    273e:	9f 4f       	sbci	r25, 0xFF	; 255
    2740:	fc 01       	movw	r30, r24
    2742:	e0 0f       	add	r30, r16
    2744:	f1 1f       	adc	r31, r17
    2746:	20 83       	st	Z, r18
		
	}while(arr[counter]==NOTPRESSED);
    2748:	fe 01       	movw	r30, r28
    274a:	eb 5a       	subi	r30, 0xAB	; 171
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	ce 01       	movw	r24, r28
    2756:	88 5a       	subi	r24, 0xA8	; 168
    2758:	9f 4f       	sbci	r25, 0xFF	; 255
    275a:	fc 01       	movw	r30, r24
    275c:	e2 0f       	add	r30, r18
    275e:	f3 1f       	adc	r31, r19
    2760:	80 81       	ld	r24, Z
    2762:	8f 3f       	cpi	r24, 0xFF	; 255
    2764:	09 f3       	breq	.-62     	; 0x2728 <main+0x330>
	if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
    2766:	fe 01       	movw	r30, r28
    2768:	eb 5a       	subi	r30, 0xAB	; 171
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 81       	ld	r24, Z
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	ce 01       	movw	r24, r28
    2774:	88 5a       	subi	r24, 0xA8	; 168
    2776:	9f 4f       	sbci	r25, 0xFF	; 255
    2778:	fc 01       	movw	r30, r24
    277a:	e2 0f       	add	r30, r18
    277c:	f3 1f       	adc	r31, r19
    277e:	80 81       	ld	r24, Z
    2780:	81 34       	cpi	r24, 0x41	; 65
    2782:	09 f4       	brne	.+2      	; 0x2786 <main+0x38e>
    2784:	4b c0       	rjmp	.+150    	; 0x281c <main+0x424>
    2786:	fe 01       	movw	r30, r28
    2788:	eb 5a       	subi	r30, 0xAB	; 171
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	ce 01       	movw	r24, r28
    2794:	88 5a       	subi	r24, 0xA8	; 168
    2796:	9f 4f       	sbci	r25, 0xFF	; 255
    2798:	fc 01       	movw	r30, r24
    279a:	e2 0f       	add	r30, r18
    279c:	f3 1f       	adc	r31, r19
    279e:	80 81       	ld	r24, Z
    27a0:	8d 33       	cpi	r24, 0x3D	; 61
    27a2:	e1 f1       	breq	.+120    	; 0x281c <main+0x424>
    27a4:	fe 01       	movw	r30, r28
    27a6:	eb 5a       	subi	r30, 0xAB	; 171
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	ce 01       	movw	r24, r28
    27b2:	88 5a       	subi	r24, 0xA8	; 168
    27b4:	9f 4f       	sbci	r25, 0xFF	; 255
    27b6:	fc 01       	movw	r30, r24
    27b8:	e2 0f       	add	r30, r18
    27ba:	f3 1f       	adc	r31, r19
    27bc:	80 81       	ld	r24, Z
    27be:	8b 32       	cpi	r24, 0x2B	; 43
    27c0:	69 f1       	breq	.+90     	; 0x281c <main+0x424>
    27c2:	fe 01       	movw	r30, r28
    27c4:	eb 5a       	subi	r30, 0xAB	; 171
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	ce 01       	movw	r24, r28
    27d0:	88 5a       	subi	r24, 0xA8	; 168
    27d2:	9f 4f       	sbci	r25, 0xFF	; 255
    27d4:	fc 01       	movw	r30, r24
    27d6:	e2 0f       	add	r30, r18
    27d8:	f3 1f       	adc	r31, r19
    27da:	80 81       	ld	r24, Z
    27dc:	8d 32       	cpi	r24, 0x2D	; 45
    27de:	f1 f0       	breq	.+60     	; 0x281c <main+0x424>
    27e0:	fe 01       	movw	r30, r28
    27e2:	eb 5a       	subi	r30, 0xAB	; 171
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	ce 01       	movw	r24, r28
    27ee:	88 5a       	subi	r24, 0xA8	; 168
    27f0:	9f 4f       	sbci	r25, 0xFF	; 255
    27f2:	fc 01       	movw	r30, r24
    27f4:	e2 0f       	add	r30, r18
    27f6:	f3 1f       	adc	r31, r19
    27f8:	80 81       	ld	r24, Z
    27fa:	8a 32       	cpi	r24, 0x2A	; 42
    27fc:	79 f0       	breq	.+30     	; 0x281c <main+0x424>
    27fe:	fe 01       	movw	r30, r28
    2800:	eb 5a       	subi	r30, 0xAB	; 171
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	ce 01       	movw	r24, r28
    280c:	88 5a       	subi	r24, 0xA8	; 168
    280e:	9f 4f       	sbci	r25, 0xFF	; 255
    2810:	fc 01       	movw	r30, r24
    2812:	e2 0f       	add	r30, r18
    2814:	f3 1f       	adc	r31, r19
    2816:	80 81       	ld	r24, Z
    2818:	8f 32       	cpi	r24, 0x2F	; 47
    281a:	19 f4       	brne	.+6      	; 0x2822 <main+0x42a>
	{
		LCD_clearscreen();
    281c:	0e 94 88 0a 	call	0x1510	; 0x1510 <LCD_clearscreen>
    2820:	f8 cd       	rjmp	.-1040   	; 0x2412 <main+0x1a>
		goto label ;
	}
	else
	{
		LCD_vSend_char(arr[counter]);
    2822:	fe 01       	movw	r30, r28
    2824:	eb 5a       	subi	r30, 0xAB	; 171
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	ce 01       	movw	r24, r28
    2830:	88 5a       	subi	r24, 0xA8	; 168
    2832:	9f 4f       	sbci	r25, 0xFF	; 255
    2834:	fc 01       	movw	r30, r24
    2836:	e2 0f       	add	r30, r18
    2838:	f3 1f       	adc	r31, r19
    283a:	80 81       	ld	r24, Z
    283c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
	}
	counter++;
    2840:	de 01       	movw	r26, r28
    2842:	ab 5a       	subi	r26, 0xAB	; 171
    2844:	bf 4f       	sbci	r27, 0xFF	; 255
    2846:	fe 01       	movw	r30, r28
    2848:	eb 5a       	subi	r30, 0xAB	; 171
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	8f 5f       	subi	r24, 0xFF	; 255
    2850:	8c 93       	st	X, r24
    2852:	fe 01       	movw	r30, r28
    2854:	ed 5b       	subi	r30, 0xBD	; 189
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a6 e9       	ldi	r26, 0x96	; 150
    285e:	b3 e4       	ldi	r27, 0x43	; 67
    2860:	80 83       	st	Z, r24
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	a2 83       	std	Z+2, r26	; 0x02
    2866:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	8e 01       	movw	r16, r28
    286a:	01 5c       	subi	r16, 0xC1	; 193
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	fe 01       	movw	r30, r28
    2870:	ed 5b       	subi	r30, 0xBD	; 189
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	60 81       	ld	r22, Z
    2876:	71 81       	ldd	r23, Z+1	; 0x01
    2878:	82 81       	ldd	r24, Z+2	; 0x02
    287a:	93 81       	ldd	r25, Z+3	; 0x03
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a ef       	ldi	r20, 0xFA	; 250
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	f8 01       	movw	r30, r16
    288e:	80 83       	st	Z, r24
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	a2 83       	std	Z+2, r26	; 0x02
    2894:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2896:	fe 01       	movw	r30, r28
    2898:	ff 96       	adiw	r30, 0x3f	; 63
    289a:	60 81       	ld	r22, Z
    289c:	71 81       	ldd	r23, Z+1	; 0x01
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	2c f4       	brge	.+10     	; 0x28bc <main+0x4c4>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9e af       	std	Y+62, r25	; 0x3e
    28b8:	8d af       	std	Y+61, r24	; 0x3d
    28ba:	46 c0       	rjmp	.+140    	; 0x2948 <main+0x550>
	else if (__tmp > 65535)
    28bc:	fe 01       	movw	r30, r28
    28be:	ff 96       	adiw	r30, 0x3f	; 63
    28c0:	60 81       	ld	r22, Z
    28c2:	71 81       	ldd	r23, Z+1	; 0x01
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	3f ef       	ldi	r19, 0xFF	; 255
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	57 e4       	ldi	r21, 0x47	; 71
    28d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	64 f5       	brge	.+88     	; 0x2930 <main+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d8:	fe 01       	movw	r30, r28
    28da:	ed 5b       	subi	r30, 0xBD	; 189
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	60 81       	ld	r22, Z
    28e0:	71 81       	ldd	r23, Z+1	; 0x01
    28e2:	82 81       	ldd	r24, Z+2	; 0x02
    28e4:	93 81       	ldd	r25, Z+3	; 0x03
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	40 e2       	ldi	r20, 0x20	; 32
    28ec:	51 e4       	ldi	r21, 0x41	; 65
    28ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9e af       	std	Y+62, r25	; 0x3e
    2904:	8d af       	std	Y+61, r24	; 0x3d
    2906:	0f c0       	rjmp	.+30     	; 0x2926 <main+0x52e>
    2908:	88 ec       	ldi	r24, 0xC8	; 200
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	9c af       	std	Y+60, r25	; 0x3c
    290e:	8b af       	std	Y+59, r24	; 0x3b
    2910:	8b ad       	ldd	r24, Y+59	; 0x3b
    2912:	9c ad       	ldd	r25, Y+60	; 0x3c
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <main+0x51c>
    2918:	9c af       	std	Y+60, r25	; 0x3c
    291a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291c:	8d ad       	ldd	r24, Y+61	; 0x3d
    291e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	9e af       	std	Y+62, r25	; 0x3e
    2924:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2926:	8d ad       	ldd	r24, Y+61	; 0x3d
    2928:	9e ad       	ldd	r25, Y+62	; 0x3e
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	69 f7       	brne	.-38     	; 0x2908 <main+0x510>
    292e:	16 c0       	rjmp	.+44     	; 0x295c <main+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2930:	fe 01       	movw	r30, r28
    2932:	ff 96       	adiw	r30, 0x3f	; 63
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9e af       	std	Y+62, r25	; 0x3e
    2946:	8d af       	std	Y+61, r24	; 0x3d
    2948:	8d ad       	ldd	r24, Y+61	; 0x3d
    294a:	9e ad       	ldd	r25, Y+62	; 0x3e
    294c:	9a af       	std	Y+58, r25	; 0x3a
    294e:	89 af       	std	Y+57, r24	; 0x39
    2950:	89 ad       	ldd	r24, Y+57	; 0x39
    2952:	9a ad       	ldd	r25, Y+58	; 0x3a
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <main+0x55c>
    2958:	9a af       	std	Y+58, r25	; 0x3a
    295a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(300);
	
	do
	{
		arr[counter]=keypad_u8check_press();
    295c:	fe 01       	movw	r30, r28
    295e:	eb 5a       	subi	r30, 0xAB	; 171
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	08 2f       	mov	r16, r24
    2966:	10 e0       	ldi	r17, 0x00	; 0
    2968:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <keypad_u8check_press>
    296c:	28 2f       	mov	r18, r24
    296e:	ce 01       	movw	r24, r28
    2970:	88 5a       	subi	r24, 0xA8	; 168
    2972:	9f 4f       	sbci	r25, 0xFF	; 255
    2974:	fc 01       	movw	r30, r24
    2976:	e0 0f       	add	r30, r16
    2978:	f1 1f       	adc	r31, r17
    297a:	20 83       	st	Z, r18
		
	}while(arr[counter]==NOTPRESSED);
    297c:	fe 01       	movw	r30, r28
    297e:	eb 5a       	subi	r30, 0xAB	; 171
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	ce 01       	movw	r24, r28
    298a:	88 5a       	subi	r24, 0xA8	; 168
    298c:	9f 4f       	sbci	r25, 0xFF	; 255
    298e:	fc 01       	movw	r30, r24
    2990:	e2 0f       	add	r30, r18
    2992:	f3 1f       	adc	r31, r19
    2994:	80 81       	ld	r24, Z
    2996:	8f 3f       	cpi	r24, 0xFF	; 255
    2998:	09 f3       	breq	.-62     	; 0x295c <main+0x564>
	
	if(arr[counter]=='A'||arr[counter]=='=')
    299a:	fe 01       	movw	r30, r28
    299c:	eb 5a       	subi	r30, 0xAB	; 171
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	ce 01       	movw	r24, r28
    29a8:	88 5a       	subi	r24, 0xA8	; 168
    29aa:	9f 4f       	sbci	r25, 0xFF	; 255
    29ac:	fc 01       	movw	r30, r24
    29ae:	e2 0f       	add	r30, r18
    29b0:	f3 1f       	adc	r31, r19
    29b2:	80 81       	ld	r24, Z
    29b4:	81 34       	cpi	r24, 0x41	; 65
    29b6:	79 f0       	breq	.+30     	; 0x29d6 <main+0x5de>
    29b8:	fe 01       	movw	r30, r28
    29ba:	eb 5a       	subi	r30, 0xAB	; 171
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	ce 01       	movw	r24, r28
    29c6:	88 5a       	subi	r24, 0xA8	; 168
    29c8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ca:	fc 01       	movw	r30, r24
    29cc:	e2 0f       	add	r30, r18
    29ce:	f3 1f       	adc	r31, r19
    29d0:	80 81       	ld	r24, Z
    29d2:	8d 33       	cpi	r24, 0x3D	; 61
    29d4:	19 f4       	brne	.+6      	; 0x29dc <main+0x5e4>
	{
		LCD_clearscreen();
    29d6:	0e 94 88 0a 	call	0x1510	; 0x1510 <LCD_clearscreen>
    29da:	1b cd       	rjmp	.-1482   	; 0x2412 <main+0x1a>
		goto label ;
	}
	else
	{
		LCD_vSend_char(arr[counter]);
    29dc:	fe 01       	movw	r30, r28
    29de:	eb 5a       	subi	r30, 0xAB	; 171
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 81       	ld	r24, Z
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	ce 01       	movw	r24, r28
    29ea:	88 5a       	subi	r24, 0xA8	; 168
    29ec:	9f 4f       	sbci	r25, 0xFF	; 255
    29ee:	fc 01       	movw	r30, r24
    29f0:	e2 0f       	add	r30, r18
    29f2:	f3 1f       	adc	r31, r19
    29f4:	80 81       	ld	r24, Z
    29f6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
	}
	counter++;
    29fa:	de 01       	movw	r26, r28
    29fc:	ab 5a       	subi	r26, 0xAB	; 171
    29fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2a00:	fe 01       	movw	r30, r28
    2a02:	eb 5a       	subi	r30, 0xAB	; 171
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	8f 5f       	subi	r24, 0xFF	; 255
    2a0a:	8c 93       	st	X, r24
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	a6 e9       	ldi	r26, 0x96	; 150
    2a12:	b3 e4       	ldi	r27, 0x43	; 67
    2a14:	8d ab       	std	Y+53, r24	; 0x35
    2a16:	9e ab       	std	Y+54, r25	; 0x36
    2a18:	af ab       	std	Y+55, r26	; 0x37
    2a1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a1e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a20:	8f a9       	ldd	r24, Y+55	; 0x37
    2a22:	98 ad       	ldd	r25, Y+56	; 0x38
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4a ef       	ldi	r20, 0xFA	; 250
    2a2a:	54 e4       	ldi	r21, 0x44	; 68
    2a2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	89 ab       	std	Y+49, r24	; 0x31
    2a36:	9a ab       	std	Y+50, r25	; 0x32
    2a38:	ab ab       	std	Y+51, r26	; 0x33
    2a3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a40:	8b a9       	ldd	r24, Y+51	; 0x33
    2a42:	9c a9       	ldd	r25, Y+52	; 0x34
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <main+0x666>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	98 ab       	std	Y+48, r25	; 0x30
    2a5a:	8f a7       	std	Y+47, r24	; 0x2f
    2a5c:	3f c0       	rjmp	.+126    	; 0x2adc <main+0x6e4>
	else if (__tmp > 65535)
    2a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a60:	7a a9       	ldd	r23, Y+50	; 0x32
    2a62:	8b a9       	ldd	r24, Y+51	; 0x33
    2a64:	9c a9       	ldd	r25, Y+52	; 0x34
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	3f ef       	ldi	r19, 0xFF	; 255
    2a6a:	4f e7       	ldi	r20, 0x7F	; 127
    2a6c:	57 e4       	ldi	r21, 0x47	; 71
    2a6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a72:	18 16       	cp	r1, r24
    2a74:	4c f5       	brge	.+82     	; 0x2ac8 <main+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	6d a9       	ldd	r22, Y+53	; 0x35
    2a78:	7e a9       	ldd	r23, Y+54	; 0x36
    2a7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	98 ab       	std	Y+48, r25	; 0x30
    2a9c:	8f a7       	std	Y+47, r24	; 0x2f
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <main+0x6c6>
    2aa0:	88 ec       	ldi	r24, 0xC8	; 200
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9e a7       	std	Y+46, r25	; 0x2e
    2aa6:	8d a7       	std	Y+45, r24	; 0x2d
    2aa8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2aaa:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <main+0x6b4>
    2ab0:	9e a7       	std	Y+46, r25	; 0x2e
    2ab2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	98 ab       	std	Y+48, r25	; 0x30
    2abc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	69 f7       	brne	.-38     	; 0x2aa0 <main+0x6a8>
    2ac6:	14 c0       	rjmp	.+40     	; 0x2af0 <main+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    2aca:	7a a9       	ldd	r23, Y+50	; 0x32
    2acc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ace:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	98 ab       	std	Y+48, r25	; 0x30
    2ada:	8f a7       	std	Y+47, r24	; 0x2f
    2adc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ade:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae0:	9c a7       	std	Y+44, r25	; 0x2c
    2ae2:	8b a7       	std	Y+43, r24	; 0x2b
    2ae4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ae6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <main+0x6f0>
    2aec:	9c a7       	std	Y+44, r25	; 0x2c
    2aee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);
	do
	{
		arr[counter]=keypad_u8check_press();
    2af0:	fe 01       	movw	r30, r28
    2af2:	eb 5a       	subi	r30, 0xAB	; 171
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 81       	ld	r24, Z
    2af8:	08 2f       	mov	r16, r24
    2afa:	10 e0       	ldi	r17, 0x00	; 0
    2afc:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <keypad_u8check_press>
    2b00:	28 2f       	mov	r18, r24
    2b02:	ce 01       	movw	r24, r28
    2b04:	88 5a       	subi	r24, 0xA8	; 168
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e0 0f       	add	r30, r16
    2b0c:	f1 1f       	adc	r31, r17
    2b0e:	20 83       	st	Z, r18
		
	}while(arr[counter]==NOTPRESSED);
    2b10:	fe 01       	movw	r30, r28
    2b12:	eb 5a       	subi	r30, 0xAB	; 171
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	28 2f       	mov	r18, r24
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	88 5a       	subi	r24, 0xA8	; 168
    2b20:	9f 4f       	sbci	r25, 0xFF	; 255
    2b22:	fc 01       	movw	r30, r24
    2b24:	e2 0f       	add	r30, r18
    2b26:	f3 1f       	adc	r31, r19
    2b28:	80 81       	ld	r24, Z
    2b2a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b2c:	09 f3       	breq	.-62     	; 0x2af0 <main+0x6f8>
	
	if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
    2b2e:	fe 01       	movw	r30, r28
    2b30:	eb 5a       	subi	r30, 0xAB	; 171
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	88 5a       	subi	r24, 0xA8	; 168
    2b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b40:	fc 01       	movw	r30, r24
    2b42:	e2 0f       	add	r30, r18
    2b44:	f3 1f       	adc	r31, r19
    2b46:	80 81       	ld	r24, Z
    2b48:	81 34       	cpi	r24, 0x41	; 65
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <main+0x756>
    2b4c:	4b c0       	rjmp	.+150    	; 0x2be4 <main+0x7ec>
    2b4e:	fe 01       	movw	r30, r28
    2b50:	eb 5a       	subi	r30, 0xAB	; 171
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	28 2f       	mov	r18, r24
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	88 5a       	subi	r24, 0xA8	; 168
    2b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	80 81       	ld	r24, Z
    2b68:	8d 33       	cpi	r24, 0x3D	; 61
    2b6a:	e1 f1       	breq	.+120    	; 0x2be4 <main+0x7ec>
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	eb 5a       	subi	r30, 0xAB	; 171
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	ce 01       	movw	r24, r28
    2b7a:	88 5a       	subi	r24, 0xA8	; 168
    2b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7e:	fc 01       	movw	r30, r24
    2b80:	e2 0f       	add	r30, r18
    2b82:	f3 1f       	adc	r31, r19
    2b84:	80 81       	ld	r24, Z
    2b86:	8b 32       	cpi	r24, 0x2B	; 43
    2b88:	69 f1       	breq	.+90     	; 0x2be4 <main+0x7ec>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	eb 5a       	subi	r30, 0xAB	; 171
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	28 2f       	mov	r18, r24
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	ce 01       	movw	r24, r28
    2b98:	88 5a       	subi	r24, 0xA8	; 168
    2b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	e2 0f       	add	r30, r18
    2ba0:	f3 1f       	adc	r31, r19
    2ba2:	80 81       	ld	r24, Z
    2ba4:	8d 32       	cpi	r24, 0x2D	; 45
    2ba6:	f1 f0       	breq	.+60     	; 0x2be4 <main+0x7ec>
    2ba8:	fe 01       	movw	r30, r28
    2baa:	eb 5a       	subi	r30, 0xAB	; 171
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	88 5a       	subi	r24, 0xA8	; 168
    2bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bba:	fc 01       	movw	r30, r24
    2bbc:	e2 0f       	add	r30, r18
    2bbe:	f3 1f       	adc	r31, r19
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8a 32       	cpi	r24, 0x2A	; 42
    2bc4:	79 f0       	breq	.+30     	; 0x2be4 <main+0x7ec>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	eb 5a       	subi	r30, 0xAB	; 171
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	80 81       	ld	r24, Z
    2bce:	28 2f       	mov	r18, r24
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	88 5a       	subi	r24, 0xA8	; 168
    2bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd8:	fc 01       	movw	r30, r24
    2bda:	e2 0f       	add	r30, r18
    2bdc:	f3 1f       	adc	r31, r19
    2bde:	80 81       	ld	r24, Z
    2be0:	8f 32       	cpi	r24, 0x2F	; 47
    2be2:	19 f4       	brne	.+6      	; 0x2bea <main+0x7f2>
	{
		LCD_clearscreen();
    2be4:	0e 94 88 0a 	call	0x1510	; 0x1510 <LCD_clearscreen>
    2be8:	14 cc       	rjmp	.-2008   	; 0x2412 <main+0x1a>
		goto label ;
	}
	else
	{
		LCD_vSend_char(arr[counter]);
    2bea:	fe 01       	movw	r30, r28
    2bec:	eb 5a       	subi	r30, 0xAB	; 171
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	88 5a       	subi	r24, 0xA8	; 168
    2bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	e2 0f       	add	r30, r18
    2c00:	f3 1f       	adc	r31, r19
    2c02:	80 81       	ld	r24, Z
    2c04:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
	}
	counter++;
    2c08:	de 01       	movw	r26, r28
    2c0a:	ab 5a       	subi	r26, 0xAB	; 171
    2c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	eb 5a       	subi	r30, 0xAB	; 171
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	8f 5f       	subi	r24, 0xFF	; 255
    2c18:	8c 93       	st	X, r24
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a6 e9       	ldi	r26, 0x96	; 150
    2c20:	b3 e4       	ldi	r27, 0x43	; 67
    2c22:	8f a3       	std	Y+39, r24	; 0x27
    2c24:	98 a7       	std	Y+40, r25	; 0x28
    2c26:	a9 a7       	std	Y+41, r26	; 0x29
    2c28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c2c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c2e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c30:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a ef       	ldi	r20, 0xFA	; 250
    2c38:	54 e4       	ldi	r21, 0x44	; 68
    2c3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8b a3       	std	Y+35, r24	; 0x23
    2c44:	9c a3       	std	Y+36, r25	; 0x24
    2c46:	ad a3       	std	Y+37, r26	; 0x25
    2c48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c50:	9e a1       	ldd	r25, Y+38	; 0x26
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <main+0x874>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9a a3       	std	Y+34, r25	; 0x22
    2c68:	89 a3       	std	Y+33, r24	; 0x21
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <main+0x8f2>
	else if (__tmp > 65535)
    2c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c70:	8d a1       	ldd	r24, Y+37	; 0x25
    2c72:	9e a1       	ldd	r25, Y+38	; 0x26
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <main+0x8de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	6f a1       	ldd	r22, Y+39	; 0x27
    2c86:	78 a5       	ldd	r23, Y+40	; 0x28
    2c88:	89 a5       	ldd	r24, Y+41	; 0x29
    2c8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9a a3       	std	Y+34, r25	; 0x22
    2caa:	89 a3       	std	Y+33, r24	; 0x21
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <main+0x8d4>
    2cae:	88 ec       	ldi	r24, 0xC8	; 200
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	98 a3       	std	Y+32, r25	; 0x20
    2cb4:	8f 8f       	std	Y+31, r24	; 0x1f
    2cb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cb8:	98 a1       	ldd	r25, Y+32	; 0x20
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <main+0x8c2>
    2cbe:	98 a3       	std	Y+32, r25	; 0x20
    2cc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9a a3       	std	Y+34, r25	; 0x22
    2cca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	89 a1       	ldd	r24, Y+33	; 0x21
    2cce:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <main+0x8b6>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <main+0x906>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cda:	8d a1       	ldd	r24, Y+37	; 0x25
    2cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    2cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9a a3       	std	Y+34, r25	; 0x22
    2ce8:	89 a3       	std	Y+33, r24	; 0x21
    2cea:	89 a1       	ldd	r24, Y+33	; 0x21
    2cec:	9a a1       	ldd	r25, Y+34	; 0x22
    2cee:	9e 8f       	std	Y+30, r25	; 0x1e
    2cf0:	8d 8f       	std	Y+29, r24	; 0x1d
    2cf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <main+0x8fe>
    2cfa:	9e 8f       	std	Y+30, r25	; 0x1e
    2cfc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);
	do
	{
		arr[counter]=keypad_u8check_press();
    2cfe:	fe 01       	movw	r30, r28
    2d00:	eb 5a       	subi	r30, 0xAB	; 171
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	80 81       	ld	r24, Z
    2d06:	08 2f       	mov	r16, r24
    2d08:	10 e0       	ldi	r17, 0x00	; 0
    2d0a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <keypad_u8check_press>
    2d0e:	28 2f       	mov	r18, r24
    2d10:	ce 01       	movw	r24, r28
    2d12:	88 5a       	subi	r24, 0xA8	; 168
    2d14:	9f 4f       	sbci	r25, 0xFF	; 255
    2d16:	fc 01       	movw	r30, r24
    2d18:	e0 0f       	add	r30, r16
    2d1a:	f1 1f       	adc	r31, r17
    2d1c:	20 83       	st	Z, r18
		
	}while(arr[counter]==NOTPRESSED);
    2d1e:	fe 01       	movw	r30, r28
    2d20:	eb 5a       	subi	r30, 0xAB	; 171
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	80 81       	ld	r24, Z
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	88 5a       	subi	r24, 0xA8	; 168
    2d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d30:	fc 01       	movw	r30, r24
    2d32:	e2 0f       	add	r30, r18
    2d34:	f3 1f       	adc	r31, r19
    2d36:	80 81       	ld	r24, Z
    2d38:	8f 3f       	cpi	r24, 0xFF	; 255
    2d3a:	09 f3       	breq	.-62     	; 0x2cfe <main+0x906>
	
	if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	eb 5a       	subi	r30, 0xAB	; 171
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	ce 01       	movw	r24, r28
    2d4a:	88 5a       	subi	r24, 0xA8	; 168
    2d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4e:	fc 01       	movw	r30, r24
    2d50:	e2 0f       	add	r30, r18
    2d52:	f3 1f       	adc	r31, r19
    2d54:	80 81       	ld	r24, Z
    2d56:	81 34       	cpi	r24, 0x41	; 65
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <main+0x964>
    2d5a:	4b c0       	rjmp	.+150    	; 0x2df2 <main+0x9fa>
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	eb 5a       	subi	r30, 0xAB	; 171
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	80 81       	ld	r24, Z
    2d64:	28 2f       	mov	r18, r24
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	ce 01       	movw	r24, r28
    2d6a:	88 5a       	subi	r24, 0xA8	; 168
    2d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6e:	fc 01       	movw	r30, r24
    2d70:	e2 0f       	add	r30, r18
    2d72:	f3 1f       	adc	r31, r19
    2d74:	80 81       	ld	r24, Z
    2d76:	8d 33       	cpi	r24, 0x3D	; 61
    2d78:	e1 f1       	breq	.+120    	; 0x2df2 <main+0x9fa>
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	eb 5a       	subi	r30, 0xAB	; 171
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	80 81       	ld	r24, Z
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	ce 01       	movw	r24, r28
    2d88:	88 5a       	subi	r24, 0xA8	; 168
    2d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	e2 0f       	add	r30, r18
    2d90:	f3 1f       	adc	r31, r19
    2d92:	80 81       	ld	r24, Z
    2d94:	8b 32       	cpi	r24, 0x2B	; 43
    2d96:	69 f1       	breq	.+90     	; 0x2df2 <main+0x9fa>
    2d98:	fe 01       	movw	r30, r28
    2d9a:	eb 5a       	subi	r30, 0xAB	; 171
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	80 81       	ld	r24, Z
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	ce 01       	movw	r24, r28
    2da6:	88 5a       	subi	r24, 0xA8	; 168
    2da8:	9f 4f       	sbci	r25, 0xFF	; 255
    2daa:	fc 01       	movw	r30, r24
    2dac:	e2 0f       	add	r30, r18
    2dae:	f3 1f       	adc	r31, r19
    2db0:	80 81       	ld	r24, Z
    2db2:	8d 32       	cpi	r24, 0x2D	; 45
    2db4:	f1 f0       	breq	.+60     	; 0x2df2 <main+0x9fa>
    2db6:	fe 01       	movw	r30, r28
    2db8:	eb 5a       	subi	r30, 0xAB	; 171
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 81       	ld	r24, Z
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	88 5a       	subi	r24, 0xA8	; 168
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	fc 01       	movw	r30, r24
    2dca:	e2 0f       	add	r30, r18
    2dcc:	f3 1f       	adc	r31, r19
    2dce:	80 81       	ld	r24, Z
    2dd0:	8a 32       	cpi	r24, 0x2A	; 42
    2dd2:	79 f0       	breq	.+30     	; 0x2df2 <main+0x9fa>
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	eb 5a       	subi	r30, 0xAB	; 171
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	80 81       	ld	r24, Z
    2ddc:	28 2f       	mov	r18, r24
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	ce 01       	movw	r24, r28
    2de2:	88 5a       	subi	r24, 0xA8	; 168
    2de4:	9f 4f       	sbci	r25, 0xFF	; 255
    2de6:	fc 01       	movw	r30, r24
    2de8:	e2 0f       	add	r30, r18
    2dea:	f3 1f       	adc	r31, r19
    2dec:	80 81       	ld	r24, Z
    2dee:	8f 32       	cpi	r24, 0x2F	; 47
    2df0:	19 f4       	brne	.+6      	; 0x2df8 <main+0xa00>
	{
		LCD_clearscreen();
    2df2:	0e 94 88 0a 	call	0x1510	; 0x1510 <LCD_clearscreen>
    2df6:	0d cb       	rjmp	.-2534   	; 0x2412 <main+0x1a>
		goto label ;
	}
	else
	{
		LCD_vSend_char(arr[counter]);
    2df8:	fe 01       	movw	r30, r28
    2dfa:	eb 5a       	subi	r30, 0xAB	; 171
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	ce 01       	movw	r24, r28
    2e06:	88 5a       	subi	r24, 0xA8	; 168
    2e08:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	e2 0f       	add	r30, r18
    2e0e:	f3 1f       	adc	r31, r19
    2e10:	80 81       	ld	r24, Z
    2e12:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
	}
	counter++;
    2e16:	de 01       	movw	r26, r28
    2e18:	ab 5a       	subi	r26, 0xAB	; 171
    2e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	eb 5a       	subi	r30, 0xAB	; 171
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	8f 5f       	subi	r24, 0xFF	; 255
    2e26:	8c 93       	st	X, r24
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	a6 e9       	ldi	r26, 0x96	; 150
    2e2e:	b3 e4       	ldi	r27, 0x43	; 67
    2e30:	89 8f       	std	Y+25, r24	; 0x19
    2e32:	9a 8f       	std	Y+26, r25	; 0x1a
    2e34:	ab 8f       	std	Y+27, r26	; 0x1b
    2e36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e38:	69 8d       	ldd	r22, Y+25	; 0x19
    2e3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	4a ef       	ldi	r20, 0xFA	; 250
    2e46:	54 e4       	ldi	r21, 0x44	; 68
    2e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	8d 8b       	std	Y+21, r24	; 0x15
    2e52:	9e 8b       	std	Y+22, r25	; 0x16
    2e54:	af 8b       	std	Y+23, r26	; 0x17
    2e56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e58:	6d 89       	ldd	r22, Y+21	; 0x15
    2e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e8       	ldi	r20, 0x80	; 128
    2e66:	5f e3       	ldi	r21, 0x3F	; 63
    2e68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e6c:	88 23       	and	r24, r24
    2e6e:	2c f4       	brge	.+10     	; 0x2e7a <main+0xa82>
		__ticks = 1;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	9c 8b       	std	Y+20, r25	; 0x14
    2e76:	8b 8b       	std	Y+19, r24	; 0x13
    2e78:	3f c0       	rjmp	.+126    	; 0x2ef8 <main+0xb00>
	else if (__tmp > 65535)
    2e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e80:	98 8d       	ldd	r25, Y+24	; 0x18
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	3f ef       	ldi	r19, 0xFF	; 255
    2e86:	4f e7       	ldi	r20, 0x7F	; 127
    2e88:	57 e4       	ldi	r21, 0x47	; 71
    2e8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e8e:	18 16       	cp	r1, r24
    2e90:	4c f5       	brge	.+82     	; 0x2ee4 <main+0xaec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e92:	69 8d       	ldd	r22, Y+25	; 0x19
    2e94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e2       	ldi	r20, 0x20	; 32
    2ea0:	51 e4       	ldi	r21, 0x41	; 65
    2ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9c 8b       	std	Y+20, r25	; 0x14
    2eb8:	8b 8b       	std	Y+19, r24	; 0x13
    2eba:	0f c0       	rjmp	.+30     	; 0x2eda <main+0xae2>
    2ebc:	88 ec       	ldi	r24, 0xC8	; 200
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9a 8b       	std	Y+18, r25	; 0x12
    2ec2:	89 8b       	std	Y+17, r24	; 0x11
    2ec4:	89 89       	ldd	r24, Y+17	; 0x11
    2ec6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <main+0xad0>
    2ecc:	9a 8b       	std	Y+18, r25	; 0x12
    2ece:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	9c 8b       	std	Y+20, r25	; 0x14
    2ed8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eda:	8b 89       	ldd	r24, Y+19	; 0x13
    2edc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	69 f7       	brne	.-38     	; 0x2ebc <main+0xac4>
    2ee2:	14 c0       	rjmp	.+40     	; 0x2f0c <main+0xb14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eea:	98 8d       	ldd	r25, Y+24	; 0x18
    2eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9c 8b       	std	Y+20, r25	; 0x14
    2ef6:	8b 8b       	std	Y+19, r24	; 0x13
    2ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    2efa:	9c 89       	ldd	r25, Y+20	; 0x14
    2efc:	98 8b       	std	Y+16, r25	; 0x10
    2efe:	8f 87       	std	Y+15, r24	; 0x0f
    2f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f02:	98 89       	ldd	r25, Y+16	; 0x10
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <main+0xb0c>
    2f08:	98 8b       	std	Y+16, r25	; 0x10
    2f0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	
	
	do
	{
		arr[counter]=keypad_u8check_press();
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	eb 5a       	subi	r30, 0xAB	; 171
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 81       	ld	r24, Z
    2f14:	08 2f       	mov	r16, r24
    2f16:	10 e0       	ldi	r17, 0x00	; 0
    2f18:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <keypad_u8check_press>
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	ce 01       	movw	r24, r28
    2f20:	88 5a       	subi	r24, 0xA8	; 168
    2f22:	9f 4f       	sbci	r25, 0xFF	; 255
    2f24:	fc 01       	movw	r30, r24
    2f26:	e0 0f       	add	r30, r16
    2f28:	f1 1f       	adc	r31, r17
    2f2a:	20 83       	st	Z, r18
		
	}while(arr[counter]==NOTPRESSED);
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	eb 5a       	subi	r30, 0xAB	; 171
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	80 81       	ld	r24, Z
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	ce 01       	movw	r24, r28
    2f3a:	88 5a       	subi	r24, 0xA8	; 168
    2f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3e:	fc 01       	movw	r30, r24
    2f40:	e2 0f       	add	r30, r18
    2f42:	f3 1f       	adc	r31, r19
    2f44:	80 81       	ld	r24, Z
    2f46:	8f 3f       	cpi	r24, 0xFF	; 255
    2f48:	09 f3       	breq	.-62     	; 0x2f0c <main+0xb14>
	
	if(arr[counter]=='=')
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	eb 5a       	subi	r30, 0xAB	; 171
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	80 81       	ld	r24, Z
    2f52:	28 2f       	mov	r18, r24
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	ce 01       	movw	r24, r28
    2f58:	88 5a       	subi	r24, 0xA8	; 168
    2f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	e2 0f       	add	r30, r18
    2f60:	f3 1f       	adc	r31, r19
    2f62:	80 81       	ld	r24, Z
    2f64:	8d 33       	cpi	r24, 0x3D	; 61
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <main+0xb72>
    2f68:	dc c4       	rjmp	.+2488   	; 0x3922 <main+0x152a>
	{
		LCD_vSend_char(arr[counter]);
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	eb 5a       	subi	r30, 0xAB	; 171
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 81       	ld	r24, Z
    2f72:	28 2f       	mov	r18, r24
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	ce 01       	movw	r24, r28
    2f78:	88 5a       	subi	r24, 0xA8	; 168
    2f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	e2 0f       	add	r30, r18
    2f80:	f3 1f       	adc	r31, r19
    2f82:	80 81       	ld	r24, Z
    2f84:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
		
		
		switch(arr[counter-3])
    2f88:	fe 01       	movw	r30, r28
    2f8a:	eb 5a       	subi	r30, 0xAB	; 171
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	80 81       	ld	r24, Z
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9c 01       	movw	r18, r24
    2f96:	23 50       	subi	r18, 0x03	; 3
    2f98:	30 40       	sbci	r19, 0x00	; 0
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	88 5a       	subi	r24, 0xA8	; 168
    2f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	e2 0f       	add	r30, r18
    2fa4:	f3 1f       	adc	r31, r19
    2fa6:	80 81       	ld	r24, Z
    2fa8:	28 2f       	mov	r18, r24
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	a0 96       	adiw	r28, 0x20	; 32
    2fae:	3f af       	std	Y+63, r19	; 0x3f
    2fb0:	2e af       	std	Y+62, r18	; 0x3e
    2fb2:	a0 97       	sbiw	r28, 0x20	; 32
    2fb4:	a0 96       	adiw	r28, 0x20	; 32
    2fb6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fba:	a0 97       	sbiw	r28, 0x20	; 32
    2fbc:	8b 32       	cpi	r24, 0x2B	; 43
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	09 f1       	breq	.+66     	; 0x3004 <main+0xc0c>
    2fc2:	a0 96       	adiw	r28, 0x20	; 32
    2fc4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fc6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fc8:	a0 97       	sbiw	r28, 0x20	; 32
    2fca:	ec 32       	cpi	r30, 0x2C	; 44
    2fcc:	f1 05       	cpc	r31, r1
    2fce:	4c f4       	brge	.+18     	; 0x2fe2 <main+0xbea>
    2fd0:	a0 96       	adiw	r28, 0x20	; 32
    2fd2:	2e ad       	ldd	r18, Y+62	; 0x3e
    2fd4:	3f ad       	ldd	r19, Y+63	; 0x3f
    2fd6:	a0 97       	sbiw	r28, 0x20	; 32
    2fd8:	2a 32       	cpi	r18, 0x2A	; 42
    2fda:	31 05       	cpc	r19, r1
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <main+0xbe8>
    2fde:	f2 c1       	rjmp	.+996    	; 0x33c4 <main+0xfcc>
    2fe0:	2b c4       	rjmp	.+2134   	; 0x3838 <main+0x1440>
    2fe2:	a0 96       	adiw	r28, 0x20	; 32
    2fe4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fe6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fe8:	a0 97       	sbiw	r28, 0x20	; 32
    2fea:	8d 32       	cpi	r24, 0x2D	; 45
    2fec:	91 05       	cpc	r25, r1
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <main+0xbfa>
    2ff0:	f5 c0       	rjmp	.+490    	; 0x31dc <main+0xde4>
    2ff2:	a0 96       	adiw	r28, 0x20	; 32
    2ff4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ff6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ff8:	a0 97       	sbiw	r28, 0x20	; 32
    2ffa:	ef 32       	cpi	r30, 0x2F	; 47
    2ffc:	f1 05       	cpc	r31, r1
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <main+0xc0a>
    3000:	2b c3       	rjmp	.+1622   	; 0x3658 <main+0x1260>
    3002:	1a c4       	rjmp	.+2100   	; 0x3838 <main+0x1440>
		{
			case '+':
			res=(arr[counter-4]-48)+((arr[counter-5]-48)*10)+((arr[counter-2]-48)*10)+(arr[counter-1]-48);
    3004:	fe 01       	movw	r30, r28
    3006:	eb 5a       	subi	r30, 0xAB	; 171
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 81       	ld	r24, Z
    300c:	88 2f       	mov	r24, r24
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9c 01       	movw	r18, r24
    3012:	24 50       	subi	r18, 0x04	; 4
    3014:	30 40       	sbci	r19, 0x00	; 0
    3016:	ce 01       	movw	r24, r28
    3018:	88 5a       	subi	r24, 0xA8	; 168
    301a:	9f 4f       	sbci	r25, 0xFF	; 255
    301c:	fc 01       	movw	r30, r24
    301e:	e2 0f       	add	r30, r18
    3020:	f3 1f       	adc	r31, r19
    3022:	80 81       	ld	r24, Z
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	ac 01       	movw	r20, r24
    302a:	40 53       	subi	r20, 0x30	; 48
    302c:	50 40       	sbci	r21, 0x00	; 0
    302e:	fe 01       	movw	r30, r28
    3030:	eb 5a       	subi	r30, 0xAB	; 171
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 81       	ld	r24, Z
    3036:	88 2f       	mov	r24, r24
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9c 01       	movw	r18, r24
    303c:	25 50       	subi	r18, 0x05	; 5
    303e:	30 40       	sbci	r19, 0x00	; 0
    3040:	ce 01       	movw	r24, r28
    3042:	88 5a       	subi	r24, 0xA8	; 168
    3044:	9f 4f       	sbci	r25, 0xFF	; 255
    3046:	fc 01       	movw	r30, r24
    3048:	e2 0f       	add	r30, r18
    304a:	f3 1f       	adc	r31, r19
    304c:	80 81       	ld	r24, Z
    304e:	88 2f       	mov	r24, r24
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	9c 01       	movw	r18, r24
    3054:	22 0f       	add	r18, r18
    3056:	33 1f       	adc	r19, r19
    3058:	c9 01       	movw	r24, r18
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	82 0f       	add	r24, r18
    3064:	93 1f       	adc	r25, r19
    3066:	80 5e       	subi	r24, 0xE0	; 224
    3068:	91 40       	sbci	r25, 0x01	; 1
    306a:	48 0f       	add	r20, r24
    306c:	59 1f       	adc	r21, r25
    306e:	fe 01       	movw	r30, r28
    3070:	eb 5a       	subi	r30, 0xAB	; 171
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 81       	ld	r24, Z
    3076:	88 2f       	mov	r24, r24
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	9c 01       	movw	r18, r24
    307c:	22 50       	subi	r18, 0x02	; 2
    307e:	30 40       	sbci	r19, 0x00	; 0
    3080:	ce 01       	movw	r24, r28
    3082:	88 5a       	subi	r24, 0xA8	; 168
    3084:	9f 4f       	sbci	r25, 0xFF	; 255
    3086:	fc 01       	movw	r30, r24
    3088:	e2 0f       	add	r30, r18
    308a:	f3 1f       	adc	r31, r19
    308c:	80 81       	ld	r24, Z
    308e:	88 2f       	mov	r24, r24
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9c 01       	movw	r18, r24
    3094:	22 0f       	add	r18, r18
    3096:	33 1f       	adc	r19, r19
    3098:	c9 01       	movw	r24, r18
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	82 0f       	add	r24, r18
    30a4:	93 1f       	adc	r25, r19
    30a6:	80 5e       	subi	r24, 0xE0	; 224
    30a8:	91 40       	sbci	r25, 0x01	; 1
    30aa:	48 0f       	add	r20, r24
    30ac:	59 1f       	adc	r21, r25
    30ae:	fe 01       	movw	r30, r28
    30b0:	eb 5a       	subi	r30, 0xAB	; 171
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 81       	ld	r24, Z
    30b6:	88 2f       	mov	r24, r24
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	9c 01       	movw	r18, r24
    30bc:	21 50       	subi	r18, 0x01	; 1
    30be:	30 40       	sbci	r19, 0x00	; 0
    30c0:	ce 01       	movw	r24, r28
    30c2:	88 5a       	subi	r24, 0xA8	; 168
    30c4:	9f 4f       	sbci	r25, 0xFF	; 255
    30c6:	fc 01       	movw	r30, r24
    30c8:	e2 0f       	add	r30, r18
    30ca:	f3 1f       	adc	r31, r19
    30cc:	80 81       	ld	r24, Z
    30ce:	88 2f       	mov	r24, r24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	c0 97       	sbiw	r24, 0x30	; 48
    30d4:	84 0f       	add	r24, r20
    30d6:	95 1f       	adc	r25, r21
    30d8:	fe 01       	movw	r30, r28
    30da:	ea 5a       	subi	r30, 0xAA	; 170
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	80 83       	st	Z, r24
			if(res>=100&&res<1000)
    30e2:	fe 01       	movw	r30, r28
    30e4:	ea 5a       	subi	r30, 0xAA	; 170
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 81       	ld	r24, Z
    30ea:	91 81       	ldd	r25, Z+1	; 0x01
    30ec:	84 36       	cpi	r24, 0x64	; 100
    30ee:	91 05       	cpc	r25, r1
    30f0:	c0 f1       	brcs	.+112    	; 0x3162 <main+0xd6a>
    30f2:	fe 01       	movw	r30, r28
    30f4:	ea 5a       	subi	r30, 0xAA	; 170
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	80 81       	ld	r24, Z
    30fa:	91 81       	ldd	r25, Z+1	; 0x01
    30fc:	f3 e0       	ldi	r31, 0x03	; 3
    30fe:	88 3e       	cpi	r24, 0xE8	; 232
    3100:	9f 07       	cpc	r25, r31
    3102:	78 f5       	brcc	.+94     	; 0x3162 <main+0xd6a>
			{
				LCD_vSend_char((res/100)+48);
    3104:	fe 01       	movw	r30, r28
    3106:	ea 5a       	subi	r30, 0xAA	; 170
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	80 81       	ld	r24, Z
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	24 e6       	ldi	r18, 0x64	; 100
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	b9 01       	movw	r22, r18
    3114:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3118:	cb 01       	movw	r24, r22
    311a:	80 5d       	subi	r24, 0xD0	; 208
    311c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char(((res/10)%10)+48);
    3120:	fe 01       	movw	r30, r28
    3122:	ea 5a       	subi	r30, 0xAA	; 170
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	2a e0       	ldi	r18, 0x0A	; 10
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	b9 01       	movw	r22, r18
    3130:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3134:	cb 01       	movw	r24, r22
    3136:	2a e0       	ldi	r18, 0x0A	; 10
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	b9 01       	movw	r22, r18
    313c:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3140:	80 5d       	subi	r24, 0xD0	; 208
    3142:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char((res%10)+48);
    3146:	fe 01       	movw	r30, r28
    3148:	ea 5a       	subi	r30, 0xAA	; 170
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	2a e0       	ldi	r18, 0x0A	; 10
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	b9 01       	movw	r22, r18
    3156:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    315a:	80 5d       	subi	r24, 0xD0	; 208
    315c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    3160:	6b c3       	rjmp	.+1750   	; 0x3838 <main+0x1440>
			}
			else if (res>=10&&res<100)
    3162:	fe 01       	movw	r30, r28
    3164:	ea 5a       	subi	r30, 0xAA	; 170
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	80 81       	ld	r24, Z
    316a:	91 81       	ldd	r25, Z+1	; 0x01
    316c:	8a 30       	cpi	r24, 0x0A	; 10
    316e:	91 05       	cpc	r25, r1
    3170:	20 f1       	brcs	.+72     	; 0x31ba <main+0xdc2>
    3172:	fe 01       	movw	r30, r28
    3174:	ea 5a       	subi	r30, 0xAA	; 170
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	84 36       	cpi	r24, 0x64	; 100
    317e:	91 05       	cpc	r25, r1
    3180:	e0 f4       	brcc	.+56     	; 0x31ba <main+0xdc2>
			{
				LCD_vSend_char((res/10)+48);
    3182:	fe 01       	movw	r30, r28
    3184:	ea 5a       	subi	r30, 0xAA	; 170
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	2a e0       	ldi	r18, 0x0A	; 10
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	b9 01       	movw	r22, r18
    3192:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3196:	cb 01       	movw	r24, r22
    3198:	80 5d       	subi	r24, 0xD0	; 208
    319a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char((res%10)+48);
    319e:	fe 01       	movw	r30, r28
    31a0:	ea 5a       	subi	r30, 0xAA	; 170
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	80 81       	ld	r24, Z
    31a6:	91 81       	ldd	r25, Z+1	; 0x01
    31a8:	2a e0       	ldi	r18, 0x0A	; 10
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	b9 01       	movw	r22, r18
    31ae:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    31b2:	80 5d       	subi	r24, 0xD0	; 208
    31b4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    31b8:	3f c3       	rjmp	.+1662   	; 0x3838 <main+0x1440>
			}
			else if(res<10)
    31ba:	fe 01       	movw	r30, r28
    31bc:	ea 5a       	subi	r30, 0xAA	; 170
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 81       	ld	r24, Z
    31c2:	91 81       	ldd	r25, Z+1	; 0x01
    31c4:	8a 30       	cpi	r24, 0x0A	; 10
    31c6:	91 05       	cpc	r25, r1
    31c8:	08 f0       	brcs	.+2      	; 0x31cc <main+0xdd4>
    31ca:	36 c3       	rjmp	.+1644   	; 0x3838 <main+0x1440>
			{
				LCD_vSend_char(res+48);
    31cc:	fe 01       	movw	r30, r28
    31ce:	ea 5a       	subi	r30, 0xAA	; 170
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	80 5d       	subi	r24, 0xD0	; 208
    31d6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    31da:	2e c3       	rjmp	.+1628   	; 0x3838 <main+0x1440>
			}
			break;
			case '-' :
			res=((arr[counter-4]-48)+((arr[counter-5]-48)*10))-(((arr[counter-2]-48)*10)+(arr[counter-1]-48));
    31dc:	fe 01       	movw	r30, r28
    31de:	eb 5a       	subi	r30, 0xAB	; 171
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 81       	ld	r24, Z
    31e4:	88 2f       	mov	r24, r24
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	9c 01       	movw	r18, r24
    31ea:	24 50       	subi	r18, 0x04	; 4
    31ec:	30 40       	sbci	r19, 0x00	; 0
    31ee:	ce 01       	movw	r24, r28
    31f0:	88 5a       	subi	r24, 0xA8	; 168
    31f2:	9f 4f       	sbci	r25, 0xFF	; 255
    31f4:	fc 01       	movw	r30, r24
    31f6:	e2 0f       	add	r30, r18
    31f8:	f3 1f       	adc	r31, r19
    31fa:	80 81       	ld	r24, Z
    31fc:	88 2f       	mov	r24, r24
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	ac 01       	movw	r20, r24
    3202:	40 53       	subi	r20, 0x30	; 48
    3204:	50 40       	sbci	r21, 0x00	; 0
    3206:	fe 01       	movw	r30, r28
    3208:	eb 5a       	subi	r30, 0xAB	; 171
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	80 81       	ld	r24, Z
    320e:	88 2f       	mov	r24, r24
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	9c 01       	movw	r18, r24
    3214:	25 50       	subi	r18, 0x05	; 5
    3216:	30 40       	sbci	r19, 0x00	; 0
    3218:	ce 01       	movw	r24, r28
    321a:	88 5a       	subi	r24, 0xA8	; 168
    321c:	9f 4f       	sbci	r25, 0xFF	; 255
    321e:	fc 01       	movw	r30, r24
    3220:	e2 0f       	add	r30, r18
    3222:	f3 1f       	adc	r31, r19
    3224:	80 81       	ld	r24, Z
    3226:	88 2f       	mov	r24, r24
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	9c 01       	movw	r18, r24
    322c:	22 0f       	add	r18, r18
    322e:	33 1f       	adc	r19, r19
    3230:	c9 01       	movw	r24, r18
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	82 0f       	add	r24, r18
    323c:	93 1f       	adc	r25, r19
    323e:	80 5e       	subi	r24, 0xE0	; 224
    3240:	91 40       	sbci	r25, 0x01	; 1
    3242:	ba 01       	movw	r22, r20
    3244:	68 0f       	add	r22, r24
    3246:	79 1f       	adc	r23, r25
    3248:	fe 01       	movw	r30, r28
    324a:	eb 5a       	subi	r30, 0xAB	; 171
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	80 81       	ld	r24, Z
    3250:	88 2f       	mov	r24, r24
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9c 01       	movw	r18, r24
    3256:	21 50       	subi	r18, 0x01	; 1
    3258:	30 40       	sbci	r19, 0x00	; 0
    325a:	ce 01       	movw	r24, r28
    325c:	88 5a       	subi	r24, 0xA8	; 168
    325e:	9f 4f       	sbci	r25, 0xFF	; 255
    3260:	fc 01       	movw	r30, r24
    3262:	e2 0f       	add	r30, r18
    3264:	f3 1f       	adc	r31, r19
    3266:	80 81       	ld	r24, Z
    3268:	28 2f       	mov	r18, r24
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	80 e3       	ldi	r24, 0x30	; 48
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	ac 01       	movw	r20, r24
    3272:	42 1b       	sub	r20, r18
    3274:	53 0b       	sbc	r21, r19
    3276:	fe 01       	movw	r30, r28
    3278:	eb 5a       	subi	r30, 0xAB	; 171
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 81       	ld	r24, Z
    327e:	88 2f       	mov	r24, r24
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9c 01       	movw	r18, r24
    3284:	22 50       	subi	r18, 0x02	; 2
    3286:	30 40       	sbci	r19, 0x00	; 0
    3288:	ce 01       	movw	r24, r28
    328a:	88 5a       	subi	r24, 0xA8	; 168
    328c:	9f 4f       	sbci	r25, 0xFF	; 255
    328e:	fc 01       	movw	r30, r24
    3290:	e2 0f       	add	r30, r18
    3292:	f3 1f       	adc	r31, r19
    3294:	80 81       	ld	r24, Z
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	9c 01       	movw	r18, r24
    329c:	22 0f       	add	r18, r18
    329e:	33 1f       	adc	r19, r19
    32a0:	c9 01       	movw	r24, r18
    32a2:	88 0f       	add	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	82 0f       	add	r24, r18
    32ac:	93 1f       	adc	r25, r19
    32ae:	90 95       	com	r25
    32b0:	81 95       	neg	r24
    32b2:	9f 4f       	sbci	r25, 0xFF	; 255
    32b4:	80 52       	subi	r24, 0x20	; 32
    32b6:	9e 4f       	sbci	r25, 0xFE	; 254
    32b8:	84 0f       	add	r24, r20
    32ba:	95 1f       	adc	r25, r21
    32bc:	86 0f       	add	r24, r22
    32be:	97 1f       	adc	r25, r23
    32c0:	fe 01       	movw	r30, r28
    32c2:	ea 5a       	subi	r30, 0xAA	; 170
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	80 83       	st	Z, r24
			if(res>=100&&res<1000)
    32ca:	fe 01       	movw	r30, r28
    32cc:	ea 5a       	subi	r30, 0xAA	; 170
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 81       	ld	r24, Z
    32d2:	91 81       	ldd	r25, Z+1	; 0x01
    32d4:	84 36       	cpi	r24, 0x64	; 100
    32d6:	91 05       	cpc	r25, r1
    32d8:	c0 f1       	brcs	.+112    	; 0x334a <main+0xf52>
    32da:	fe 01       	movw	r30, r28
    32dc:	ea 5a       	subi	r30, 0xAA	; 170
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	80 81       	ld	r24, Z
    32e2:	91 81       	ldd	r25, Z+1	; 0x01
    32e4:	23 e0       	ldi	r18, 0x03	; 3
    32e6:	88 3e       	cpi	r24, 0xE8	; 232
    32e8:	92 07       	cpc	r25, r18
    32ea:	78 f5       	brcc	.+94     	; 0x334a <main+0xf52>
			{
				LCD_vSend_char((res/100)+48);
    32ec:	fe 01       	movw	r30, r28
    32ee:	ea 5a       	subi	r30, 0xAA	; 170
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	24 e6       	ldi	r18, 0x64	; 100
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	b9 01       	movw	r22, r18
    32fc:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3300:	cb 01       	movw	r24, r22
    3302:	80 5d       	subi	r24, 0xD0	; 208
    3304:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char(((res/10)%10)+48);
    3308:	fe 01       	movw	r30, r28
    330a:	ea 5a       	subi	r30, 0xAA	; 170
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	91 81       	ldd	r25, Z+1	; 0x01
    3312:	2a e0       	ldi	r18, 0x0A	; 10
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	b9 01       	movw	r22, r18
    3318:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    331c:	cb 01       	movw	r24, r22
    331e:	2a e0       	ldi	r18, 0x0A	; 10
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	b9 01       	movw	r22, r18
    3324:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3328:	80 5d       	subi	r24, 0xD0	; 208
    332a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char((res%10)+48);
    332e:	fe 01       	movw	r30, r28
    3330:	ea 5a       	subi	r30, 0xAA	; 170
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	80 81       	ld	r24, Z
    3336:	91 81       	ldd	r25, Z+1	; 0x01
    3338:	2a e0       	ldi	r18, 0x0A	; 10
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	b9 01       	movw	r22, r18
    333e:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3342:	80 5d       	subi	r24, 0xD0	; 208
    3344:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    3348:	77 c2       	rjmp	.+1262   	; 0x3838 <main+0x1440>
			}
			else if (res>=10&&res<100)
    334a:	fe 01       	movw	r30, r28
    334c:	ea 5a       	subi	r30, 0xAA	; 170
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	80 81       	ld	r24, Z
    3352:	91 81       	ldd	r25, Z+1	; 0x01
    3354:	8a 30       	cpi	r24, 0x0A	; 10
    3356:	91 05       	cpc	r25, r1
    3358:	20 f1       	brcs	.+72     	; 0x33a2 <main+0xfaa>
    335a:	fe 01       	movw	r30, r28
    335c:	ea 5a       	subi	r30, 0xAA	; 170
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	80 81       	ld	r24, Z
    3362:	91 81       	ldd	r25, Z+1	; 0x01
    3364:	84 36       	cpi	r24, 0x64	; 100
    3366:	91 05       	cpc	r25, r1
    3368:	e0 f4       	brcc	.+56     	; 0x33a2 <main+0xfaa>
			{
				LCD_vSend_char((res/10)+48);
    336a:	fe 01       	movw	r30, r28
    336c:	ea 5a       	subi	r30, 0xAA	; 170
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	2a e0       	ldi	r18, 0x0A	; 10
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	b9 01       	movw	r22, r18
    337a:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    337e:	cb 01       	movw	r24, r22
    3380:	80 5d       	subi	r24, 0xD0	; 208
    3382:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char((res%10)+48);
    3386:	fe 01       	movw	r30, r28
    3388:	ea 5a       	subi	r30, 0xAA	; 170
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	80 81       	ld	r24, Z
    338e:	91 81       	ldd	r25, Z+1	; 0x01
    3390:	2a e0       	ldi	r18, 0x0A	; 10
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	b9 01       	movw	r22, r18
    3396:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    339a:	80 5d       	subi	r24, 0xD0	; 208
    339c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    33a0:	4b c2       	rjmp	.+1174   	; 0x3838 <main+0x1440>
			}
			else if(res<10)
    33a2:	fe 01       	movw	r30, r28
    33a4:	ea 5a       	subi	r30, 0xAA	; 170
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	8a 30       	cpi	r24, 0x0A	; 10
    33ae:	91 05       	cpc	r25, r1
    33b0:	08 f0       	brcs	.+2      	; 0x33b4 <main+0xfbc>
    33b2:	42 c2       	rjmp	.+1156   	; 0x3838 <main+0x1440>
			{
				LCD_vSend_char(res+48);
    33b4:	fe 01       	movw	r30, r28
    33b6:	ea 5a       	subi	r30, 0xAA	; 170
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	80 81       	ld	r24, Z
    33bc:	80 5d       	subi	r24, 0xD0	; 208
    33be:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    33c2:	3a c2       	rjmp	.+1140   	; 0x3838 <main+0x1440>
			}
			break;
			case '*':
			res=((arr[counter-4]-48)+((arr[counter-5]-48)*10))*(((arr[counter-2]-48)*10)+(arr[counter-1]-48));
    33c4:	fe 01       	movw	r30, r28
    33c6:	eb 5a       	subi	r30, 0xAB	; 171
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	80 81       	ld	r24, Z
    33cc:	88 2f       	mov	r24, r24
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9c 01       	movw	r18, r24
    33d2:	24 50       	subi	r18, 0x04	; 4
    33d4:	30 40       	sbci	r19, 0x00	; 0
    33d6:	ce 01       	movw	r24, r28
    33d8:	88 5a       	subi	r24, 0xA8	; 168
    33da:	9f 4f       	sbci	r25, 0xFF	; 255
    33dc:	fc 01       	movw	r30, r24
    33de:	e2 0f       	add	r30, r18
    33e0:	f3 1f       	adc	r31, r19
    33e2:	80 81       	ld	r24, Z
    33e4:	88 2f       	mov	r24, r24
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	ac 01       	movw	r20, r24
    33ea:	40 53       	subi	r20, 0x30	; 48
    33ec:	50 40       	sbci	r21, 0x00	; 0
    33ee:	fe 01       	movw	r30, r28
    33f0:	eb 5a       	subi	r30, 0xAB	; 171
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	80 81       	ld	r24, Z
    33f6:	88 2f       	mov	r24, r24
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	9c 01       	movw	r18, r24
    33fc:	25 50       	subi	r18, 0x05	; 5
    33fe:	30 40       	sbci	r19, 0x00	; 0
    3400:	ce 01       	movw	r24, r28
    3402:	88 5a       	subi	r24, 0xA8	; 168
    3404:	9f 4f       	sbci	r25, 0xFF	; 255
    3406:	fc 01       	movw	r30, r24
    3408:	e2 0f       	add	r30, r18
    340a:	f3 1f       	adc	r31, r19
    340c:	80 81       	ld	r24, Z
    340e:	88 2f       	mov	r24, r24
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	9c 01       	movw	r18, r24
    3414:	22 0f       	add	r18, r18
    3416:	33 1f       	adc	r19, r19
    3418:	c9 01       	movw	r24, r18
    341a:	88 0f       	add	r24, r24
    341c:	99 1f       	adc	r25, r25
    341e:	88 0f       	add	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	82 0f       	add	r24, r18
    3424:	93 1f       	adc	r25, r19
    3426:	80 5e       	subi	r24, 0xE0	; 224
    3428:	91 40       	sbci	r25, 0x01	; 1
    342a:	ba 01       	movw	r22, r20
    342c:	68 0f       	add	r22, r24
    342e:	79 1f       	adc	r23, r25
    3430:	fe 01       	movw	r30, r28
    3432:	eb 5a       	subi	r30, 0xAB	; 171
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 81       	ld	r24, Z
    3438:	88 2f       	mov	r24, r24
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9c 01       	movw	r18, r24
    343e:	22 50       	subi	r18, 0x02	; 2
    3440:	30 40       	sbci	r19, 0x00	; 0
    3442:	ce 01       	movw	r24, r28
    3444:	88 5a       	subi	r24, 0xA8	; 168
    3446:	9f 4f       	sbci	r25, 0xFF	; 255
    3448:	fc 01       	movw	r30, r24
    344a:	e2 0f       	add	r30, r18
    344c:	f3 1f       	adc	r31, r19
    344e:	80 81       	ld	r24, Z
    3450:	88 2f       	mov	r24, r24
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	9c 01       	movw	r18, r24
    3456:	22 0f       	add	r18, r18
    3458:	33 1f       	adc	r19, r19
    345a:	c9 01       	movw	r24, r18
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	88 0f       	add	r24, r24
    3462:	99 1f       	adc	r25, r25
    3464:	82 0f       	add	r24, r18
    3466:	93 1f       	adc	r25, r19
    3468:	ac 01       	movw	r20, r24
    346a:	40 5e       	subi	r20, 0xE0	; 224
    346c:	51 40       	sbci	r21, 0x01	; 1
    346e:	fe 01       	movw	r30, r28
    3470:	eb 5a       	subi	r30, 0xAB	; 171
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	88 2f       	mov	r24, r24
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	9c 01       	movw	r18, r24
    347c:	21 50       	subi	r18, 0x01	; 1
    347e:	30 40       	sbci	r19, 0x00	; 0
    3480:	ce 01       	movw	r24, r28
    3482:	88 5a       	subi	r24, 0xA8	; 168
    3484:	9f 4f       	sbci	r25, 0xFF	; 255
    3486:	fc 01       	movw	r30, r24
    3488:	e2 0f       	add	r30, r18
    348a:	f3 1f       	adc	r31, r19
    348c:	80 81       	ld	r24, Z
    348e:	88 2f       	mov	r24, r24
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	c0 97       	sbiw	r24, 0x30	; 48
    3494:	84 0f       	add	r24, r20
    3496:	95 1f       	adc	r25, r21
    3498:	fc 01       	movw	r30, r24
    349a:	6e 9f       	mul	r22, r30
    349c:	c0 01       	movw	r24, r0
    349e:	6f 9f       	mul	r22, r31
    34a0:	90 0d       	add	r25, r0
    34a2:	7e 9f       	mul	r23, r30
    34a4:	90 0d       	add	r25, r0
    34a6:	11 24       	eor	r1, r1
    34a8:	fe 01       	movw	r30, r28
    34aa:	ea 5a       	subi	r30, 0xAA	; 170
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	80 83       	st	Z, r24
			if(res>=1000&&res<10000)
    34b2:	fe 01       	movw	r30, r28
    34b4:	ea 5a       	subi	r30, 0xAA	; 170
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	80 81       	ld	r24, Z
    34ba:	91 81       	ldd	r25, Z+1	; 0x01
    34bc:	f3 e0       	ldi	r31, 0x03	; 3
    34be:	88 3e       	cpi	r24, 0xE8	; 232
    34c0:	9f 07       	cpc	r25, r31
    34c2:	08 f4       	brcc	.+2      	; 0x34c6 <main+0x10ce>
    34c4:	4c c0       	rjmp	.+152    	; 0x355e <main+0x1166>
    34c6:	fe 01       	movw	r30, r28
    34c8:	ea 5a       	subi	r30, 0xAA	; 170
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	80 81       	ld	r24, Z
    34ce:	91 81       	ldd	r25, Z+1	; 0x01
    34d0:	27 e2       	ldi	r18, 0x27	; 39
    34d2:	80 31       	cpi	r24, 0x10	; 16
    34d4:	92 07       	cpc	r25, r18
    34d6:	08 f0       	brcs	.+2      	; 0x34da <main+0x10e2>
    34d8:	42 c0       	rjmp	.+132    	; 0x355e <main+0x1166>
			{
				LCD_vSend_char((res/1000)+48);
    34da:	fe 01       	movw	r30, r28
    34dc:	ea 5a       	subi	r30, 0xAA	; 170
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	28 ee       	ldi	r18, 0xE8	; 232
    34e6:	33 e0       	ldi	r19, 0x03	; 3
    34e8:	b9 01       	movw	r22, r18
    34ea:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    34ee:	cb 01       	movw	r24, r22
    34f0:	80 5d       	subi	r24, 0xD0	; 208
    34f2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char(((res/100)%10)+48);
    34f6:	fe 01       	movw	r30, r28
    34f8:	ea 5a       	subi	r30, 0xAA	; 170
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	80 81       	ld	r24, Z
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	24 e6       	ldi	r18, 0x64	; 100
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	b9 01       	movw	r22, r18
    3506:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    350a:	cb 01       	movw	r24, r22
    350c:	2a e0       	ldi	r18, 0x0A	; 10
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	b9 01       	movw	r22, r18
    3512:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3516:	80 5d       	subi	r24, 0xD0	; 208
    3518:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char(((res/10)%10)+48);
    351c:	fe 01       	movw	r30, r28
    351e:	ea 5a       	subi	r30, 0xAA	; 170
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 81       	ld	r24, Z
    3524:	91 81       	ldd	r25, Z+1	; 0x01
    3526:	2a e0       	ldi	r18, 0x0A	; 10
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	b9 01       	movw	r22, r18
    352c:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3530:	cb 01       	movw	r24, r22
    3532:	2a e0       	ldi	r18, 0x0A	; 10
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	b9 01       	movw	r22, r18
    3538:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    353c:	80 5d       	subi	r24, 0xD0	; 208
    353e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char((res%10)+48);
    3542:	fe 01       	movw	r30, r28
    3544:	ea 5a       	subi	r30, 0xAA	; 170
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	91 81       	ldd	r25, Z+1	; 0x01
    354c:	2a e0       	ldi	r18, 0x0A	; 10
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	b9 01       	movw	r22, r18
    3552:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3556:	80 5d       	subi	r24, 0xD0	; 208
    3558:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    355c:	6d c1       	rjmp	.+730    	; 0x3838 <main+0x1440>
				
			}
			else if(res>=100&&res<1000)
    355e:	fe 01       	movw	r30, r28
    3560:	ea 5a       	subi	r30, 0xAA	; 170
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	80 81       	ld	r24, Z
    3566:	91 81       	ldd	r25, Z+1	; 0x01
    3568:	84 36       	cpi	r24, 0x64	; 100
    356a:	91 05       	cpc	r25, r1
    356c:	c0 f1       	brcs	.+112    	; 0x35de <main+0x11e6>
    356e:	fe 01       	movw	r30, r28
    3570:	ea 5a       	subi	r30, 0xAA	; 170
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	80 81       	ld	r24, Z
    3576:	91 81       	ldd	r25, Z+1	; 0x01
    3578:	33 e0       	ldi	r19, 0x03	; 3
    357a:	88 3e       	cpi	r24, 0xE8	; 232
    357c:	93 07       	cpc	r25, r19
    357e:	78 f5       	brcc	.+94     	; 0x35de <main+0x11e6>
			{
				LCD_vSend_char((res/100)+48);
    3580:	fe 01       	movw	r30, r28
    3582:	ea 5a       	subi	r30, 0xAA	; 170
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	80 81       	ld	r24, Z
    3588:	91 81       	ldd	r25, Z+1	; 0x01
    358a:	24 e6       	ldi	r18, 0x64	; 100
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	b9 01       	movw	r22, r18
    3590:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3594:	cb 01       	movw	r24, r22
    3596:	80 5d       	subi	r24, 0xD0	; 208
    3598:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char(((res/10)%10)+48);
    359c:	fe 01       	movw	r30, r28
    359e:	ea 5a       	subi	r30, 0xAA	; 170
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	80 81       	ld	r24, Z
    35a4:	91 81       	ldd	r25, Z+1	; 0x01
    35a6:	2a e0       	ldi	r18, 0x0A	; 10
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	b9 01       	movw	r22, r18
    35ac:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    35b0:	cb 01       	movw	r24, r22
    35b2:	2a e0       	ldi	r18, 0x0A	; 10
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	b9 01       	movw	r22, r18
    35b8:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    35bc:	80 5d       	subi	r24, 0xD0	; 208
    35be:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char((res%10)+48);
    35c2:	fe 01       	movw	r30, r28
    35c4:	ea 5a       	subi	r30, 0xAA	; 170
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	80 81       	ld	r24, Z
    35ca:	91 81       	ldd	r25, Z+1	; 0x01
    35cc:	2a e0       	ldi	r18, 0x0A	; 10
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	b9 01       	movw	r22, r18
    35d2:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    35d6:	80 5d       	subi	r24, 0xD0	; 208
    35d8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    35dc:	2d c1       	rjmp	.+602    	; 0x3838 <main+0x1440>
			}
			else if (res>=10&&res<100)
    35de:	fe 01       	movw	r30, r28
    35e0:	ea 5a       	subi	r30, 0xAA	; 170
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	80 81       	ld	r24, Z
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	8a 30       	cpi	r24, 0x0A	; 10
    35ea:	91 05       	cpc	r25, r1
    35ec:	20 f1       	brcs	.+72     	; 0x3636 <main+0x123e>
    35ee:	fe 01       	movw	r30, r28
    35f0:	ea 5a       	subi	r30, 0xAA	; 170
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	80 81       	ld	r24, Z
    35f6:	91 81       	ldd	r25, Z+1	; 0x01
    35f8:	84 36       	cpi	r24, 0x64	; 100
    35fa:	91 05       	cpc	r25, r1
    35fc:	e0 f4       	brcc	.+56     	; 0x3636 <main+0x123e>
			{
				LCD_vSend_char((res/10)+48);
    35fe:	fe 01       	movw	r30, r28
    3600:	ea 5a       	subi	r30, 0xAA	; 170
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	80 81       	ld	r24, Z
    3606:	91 81       	ldd	r25, Z+1	; 0x01
    3608:	2a e0       	ldi	r18, 0x0A	; 10
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	b9 01       	movw	r22, r18
    360e:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3612:	cb 01       	movw	r24, r22
    3614:	80 5d       	subi	r24, 0xD0	; 208
    3616:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char((res%10)+48);
    361a:	fe 01       	movw	r30, r28
    361c:	ea 5a       	subi	r30, 0xAA	; 170
    361e:	ff 4f       	sbci	r31, 0xFF	; 255
    3620:	80 81       	ld	r24, Z
    3622:	91 81       	ldd	r25, Z+1	; 0x01
    3624:	2a e0       	ldi	r18, 0x0A	; 10
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	b9 01       	movw	r22, r18
    362a:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    362e:	80 5d       	subi	r24, 0xD0	; 208
    3630:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    3634:	01 c1       	rjmp	.+514    	; 0x3838 <main+0x1440>
			}
			else if(res<10)
    3636:	fe 01       	movw	r30, r28
    3638:	ea 5a       	subi	r30, 0xAA	; 170
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	8a 30       	cpi	r24, 0x0A	; 10
    3642:	91 05       	cpc	r25, r1
    3644:	08 f0       	brcs	.+2      	; 0x3648 <main+0x1250>
    3646:	f8 c0       	rjmp	.+496    	; 0x3838 <main+0x1440>
			{
				LCD_vSend_char(res+48);
    3648:	fe 01       	movw	r30, r28
    364a:	ea 5a       	subi	r30, 0xAA	; 170
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	80 81       	ld	r24, Z
    3650:	80 5d       	subi	r24, 0xD0	; 208
    3652:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    3656:	f0 c0       	rjmp	.+480    	; 0x3838 <main+0x1440>
			}
			break;
			case '/':
			res=((arr[counter-4]-48)+((arr[counter-5]-48)*10))/(((arr[counter-2]-48)*10)+(arr[counter-1]-48));
    3658:	fe 01       	movw	r30, r28
    365a:	eb 5a       	subi	r30, 0xAB	; 171
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	80 81       	ld	r24, Z
    3660:	88 2f       	mov	r24, r24
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	9c 01       	movw	r18, r24
    3666:	24 50       	subi	r18, 0x04	; 4
    3668:	30 40       	sbci	r19, 0x00	; 0
    366a:	ce 01       	movw	r24, r28
    366c:	88 5a       	subi	r24, 0xA8	; 168
    366e:	9f 4f       	sbci	r25, 0xFF	; 255
    3670:	fc 01       	movw	r30, r24
    3672:	e2 0f       	add	r30, r18
    3674:	f3 1f       	adc	r31, r19
    3676:	80 81       	ld	r24, Z
    3678:	88 2f       	mov	r24, r24
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	ac 01       	movw	r20, r24
    367e:	40 53       	subi	r20, 0x30	; 48
    3680:	50 40       	sbci	r21, 0x00	; 0
    3682:	fe 01       	movw	r30, r28
    3684:	eb 5a       	subi	r30, 0xAB	; 171
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	80 81       	ld	r24, Z
    368a:	88 2f       	mov	r24, r24
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	9c 01       	movw	r18, r24
    3690:	25 50       	subi	r18, 0x05	; 5
    3692:	30 40       	sbci	r19, 0x00	; 0
    3694:	ce 01       	movw	r24, r28
    3696:	88 5a       	subi	r24, 0xA8	; 168
    3698:	9f 4f       	sbci	r25, 0xFF	; 255
    369a:	fc 01       	movw	r30, r24
    369c:	e2 0f       	add	r30, r18
    369e:	f3 1f       	adc	r31, r19
    36a0:	80 81       	ld	r24, Z
    36a2:	88 2f       	mov	r24, r24
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	9c 01       	movw	r18, r24
    36a8:	22 0f       	add	r18, r18
    36aa:	33 1f       	adc	r19, r19
    36ac:	c9 01       	movw	r24, r18
    36ae:	88 0f       	add	r24, r24
    36b0:	99 1f       	adc	r25, r25
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	82 0f       	add	r24, r18
    36b8:	93 1f       	adc	r25, r19
    36ba:	80 5e       	subi	r24, 0xE0	; 224
    36bc:	91 40       	sbci	r25, 0x01	; 1
    36be:	ba 01       	movw	r22, r20
    36c0:	68 0f       	add	r22, r24
    36c2:	79 1f       	adc	r23, r25
    36c4:	fe 01       	movw	r30, r28
    36c6:	eb 5a       	subi	r30, 0xAB	; 171
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	80 81       	ld	r24, Z
    36cc:	88 2f       	mov	r24, r24
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	9c 01       	movw	r18, r24
    36d2:	22 50       	subi	r18, 0x02	; 2
    36d4:	30 40       	sbci	r19, 0x00	; 0
    36d6:	ce 01       	movw	r24, r28
    36d8:	88 5a       	subi	r24, 0xA8	; 168
    36da:	9f 4f       	sbci	r25, 0xFF	; 255
    36dc:	fc 01       	movw	r30, r24
    36de:	e2 0f       	add	r30, r18
    36e0:	f3 1f       	adc	r31, r19
    36e2:	80 81       	ld	r24, Z
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9c 01       	movw	r18, r24
    36ea:	22 0f       	add	r18, r18
    36ec:	33 1f       	adc	r19, r19
    36ee:	c9 01       	movw	r24, r18
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	82 0f       	add	r24, r18
    36fa:	93 1f       	adc	r25, r19
    36fc:	ac 01       	movw	r20, r24
    36fe:	40 5e       	subi	r20, 0xE0	; 224
    3700:	51 40       	sbci	r21, 0x01	; 1
    3702:	fe 01       	movw	r30, r28
    3704:	eb 5a       	subi	r30, 0xAB	; 171
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	80 81       	ld	r24, Z
    370a:	88 2f       	mov	r24, r24
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	9c 01       	movw	r18, r24
    3710:	21 50       	subi	r18, 0x01	; 1
    3712:	30 40       	sbci	r19, 0x00	; 0
    3714:	ce 01       	movw	r24, r28
    3716:	88 5a       	subi	r24, 0xA8	; 168
    3718:	9f 4f       	sbci	r25, 0xFF	; 255
    371a:	fc 01       	movw	r30, r24
    371c:	e2 0f       	add	r30, r18
    371e:	f3 1f       	adc	r31, r19
    3720:	80 81       	ld	r24, Z
    3722:	88 2f       	mov	r24, r24
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	c0 97       	sbiw	r24, 0x30	; 48
    3728:	9a 01       	movw	r18, r20
    372a:	28 0f       	add	r18, r24
    372c:	39 1f       	adc	r19, r25
    372e:	cb 01       	movw	r24, r22
    3730:	b9 01       	movw	r22, r18
    3732:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__divmodhi4>
    3736:	cb 01       	movw	r24, r22
    3738:	fe 01       	movw	r30, r28
    373a:	ea 5a       	subi	r30, 0xAA	; 170
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	80 83       	st	Z, r24
			if(res>=100&&res<1000)
    3742:	fe 01       	movw	r30, r28
    3744:	ea 5a       	subi	r30, 0xAA	; 170
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	80 81       	ld	r24, Z
    374a:	91 81       	ldd	r25, Z+1	; 0x01
    374c:	84 36       	cpi	r24, 0x64	; 100
    374e:	91 05       	cpc	r25, r1
    3750:	c0 f1       	brcs	.+112    	; 0x37c2 <main+0x13ca>
    3752:	fe 01       	movw	r30, r28
    3754:	ea 5a       	subi	r30, 0xAA	; 170
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	91 81       	ldd	r25, Z+1	; 0x01
    375c:	e3 e0       	ldi	r30, 0x03	; 3
    375e:	88 3e       	cpi	r24, 0xE8	; 232
    3760:	9e 07       	cpc	r25, r30
    3762:	78 f5       	brcc	.+94     	; 0x37c2 <main+0x13ca>
			{
				LCD_vSend_char((res/100)+48);
    3764:	fe 01       	movw	r30, r28
    3766:	ea 5a       	subi	r30, 0xAA	; 170
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	80 81       	ld	r24, Z
    376c:	91 81       	ldd	r25, Z+1	; 0x01
    376e:	24 e6       	ldi	r18, 0x64	; 100
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	b9 01       	movw	r22, r18
    3774:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3778:	cb 01       	movw	r24, r22
    377a:	80 5d       	subi	r24, 0xD0	; 208
    377c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char(((res/10)%10)+48);
    3780:	fe 01       	movw	r30, r28
    3782:	ea 5a       	subi	r30, 0xAA	; 170
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 81       	ld	r24, Z
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	2a e0       	ldi	r18, 0x0A	; 10
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	b9 01       	movw	r22, r18
    3790:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3794:	cb 01       	movw	r24, r22
    3796:	2a e0       	ldi	r18, 0x0A	; 10
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	b9 01       	movw	r22, r18
    379c:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    37a0:	80 5d       	subi	r24, 0xD0	; 208
    37a2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char((res%10)+48);
    37a6:	fe 01       	movw	r30, r28
    37a8:	ea 5a       	subi	r30, 0xAA	; 170
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	80 81       	ld	r24, Z
    37ae:	91 81       	ldd	r25, Z+1	; 0x01
    37b0:	2a e0       	ldi	r18, 0x0A	; 10
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	b9 01       	movw	r22, r18
    37b6:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    37ba:	80 5d       	subi	r24, 0xD0	; 208
    37bc:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    37c0:	3b c0       	rjmp	.+118    	; 0x3838 <main+0x1440>
			}
			else if (res>=10&&res<100)
    37c2:	fe 01       	movw	r30, r28
    37c4:	ea 5a       	subi	r30, 0xAA	; 170
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 81       	ld	r24, Z
    37ca:	91 81       	ldd	r25, Z+1	; 0x01
    37cc:	8a 30       	cpi	r24, 0x0A	; 10
    37ce:	91 05       	cpc	r25, r1
    37d0:	20 f1       	brcs	.+72     	; 0x381a <main+0x1422>
    37d2:	fe 01       	movw	r30, r28
    37d4:	ea 5a       	subi	r30, 0xAA	; 170
    37d6:	ff 4f       	sbci	r31, 0xFF	; 255
    37d8:	80 81       	ld	r24, Z
    37da:	91 81       	ldd	r25, Z+1	; 0x01
    37dc:	84 36       	cpi	r24, 0x64	; 100
    37de:	91 05       	cpc	r25, r1
    37e0:	e0 f4       	brcc	.+56     	; 0x381a <main+0x1422>
			{
				LCD_vSend_char((res/10)+48);
    37e2:	fe 01       	movw	r30, r28
    37e4:	ea 5a       	subi	r30, 0xAA	; 170
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	2a e0       	ldi	r18, 0x0A	; 10
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	b9 01       	movw	r22, r18
    37f2:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    37f6:	cb 01       	movw	r24, r22
    37f8:	80 5d       	subi	r24, 0xD0	; 208
    37fa:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
				LCD_vSend_char((res%10)+48);
    37fe:	fe 01       	movw	r30, r28
    3800:	ea 5a       	subi	r30, 0xAA	; 170
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	80 81       	ld	r24, Z
    3806:	91 81       	ldd	r25, Z+1	; 0x01
    3808:	2a e0       	ldi	r18, 0x0A	; 10
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	b9 01       	movw	r22, r18
    380e:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodhi4>
    3812:	80 5d       	subi	r24, 0xD0	; 208
    3814:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    3818:	0f c0       	rjmp	.+30     	; 0x3838 <main+0x1440>
			}
			else if(res<10)
    381a:	fe 01       	movw	r30, r28
    381c:	ea 5a       	subi	r30, 0xAA	; 170
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	80 81       	ld	r24, Z
    3822:	91 81       	ldd	r25, Z+1	; 0x01
    3824:	8a 30       	cpi	r24, 0x0A	; 10
    3826:	91 05       	cpc	r25, r1
    3828:	38 f4       	brcc	.+14     	; 0x3838 <main+0x1440>
			{
				LCD_vSend_char(res+48);
    382a:	fe 01       	movw	r30, r28
    382c:	ea 5a       	subi	r30, 0xAA	; 170
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	80 81       	ld	r24, Z
    3832:	80 5d       	subi	r24, 0xD0	; 208
    3834:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_vSend_char>
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	a8 e4       	ldi	r26, 0x48	; 72
    383e:	b3 e4       	ldi	r27, 0x43	; 67
    3840:	8b 87       	std	Y+11, r24	; 0x0b
    3842:	9c 87       	std	Y+12, r25	; 0x0c
    3844:	ad 87       	std	Y+13, r26	; 0x0d
    3846:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3848:	6b 85       	ldd	r22, Y+11	; 0x0b
    384a:	7c 85       	ldd	r23, Y+12	; 0x0c
    384c:	8d 85       	ldd	r24, Y+13	; 0x0d
    384e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	4a ef       	ldi	r20, 0xFA	; 250
    3856:	54 e4       	ldi	r21, 0x44	; 68
    3858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	8f 83       	std	Y+7, r24	; 0x07
    3862:	98 87       	std	Y+8, r25	; 0x08
    3864:	a9 87       	std	Y+9, r26	; 0x09
    3866:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3868:	6f 81       	ldd	r22, Y+7	; 0x07
    386a:	78 85       	ldd	r23, Y+8	; 0x08
    386c:	89 85       	ldd	r24, Y+9	; 0x09
    386e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e8       	ldi	r20, 0x80	; 128
    3876:	5f e3       	ldi	r21, 0x3F	; 63
    3878:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    387c:	88 23       	and	r24, r24
    387e:	2c f4       	brge	.+10     	; 0x388a <main+0x1492>
		__ticks = 1;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	9e 83       	std	Y+6, r25	; 0x06
    3886:	8d 83       	std	Y+5, r24	; 0x05
    3888:	40 c0       	rjmp	.+128    	; 0x390a <main+0x1512>
	else if (__tmp > 65535)
    388a:	6f 81       	ldd	r22, Y+7	; 0x07
    388c:	78 85       	ldd	r23, Y+8	; 0x08
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	3f ef       	ldi	r19, 0xFF	; 255
    3896:	4f e7       	ldi	r20, 0x7F	; 127
    3898:	57 e4       	ldi	r21, 0x47	; 71
    389a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    389e:	18 16       	cp	r1, r24
    38a0:	54 f5       	brge	.+84     	; 0x38f6 <main+0x14fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	40 e2       	ldi	r20, 0x20	; 32
    38b0:	51 e4       	ldi	r21, 0x41	; 65
    38b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	bc 01       	movw	r22, r24
    38bc:	cd 01       	movw	r24, r26
    38be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
    38ca:	0f c0       	rjmp	.+30     	; 0x38ea <main+0x14f2>
    38cc:	88 ec       	ldi	r24, 0xC8	; 200
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	9c 83       	std	Y+4, r25	; 0x04
    38d2:	8b 83       	std	Y+3, r24	; 0x03
    38d4:	8b 81       	ldd	r24, Y+3	; 0x03
    38d6:	9c 81       	ldd	r25, Y+4	; 0x04
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <main+0x14e0>
    38dc:	9c 83       	std	Y+4, r25	; 0x04
    38de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e0:	8d 81       	ldd	r24, Y+5	; 0x05
    38e2:	9e 81       	ldd	r25, Y+6	; 0x06
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	9e 83       	std	Y+6, r25	; 0x06
    38e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ea:	8d 81       	ldd	r24, Y+5	; 0x05
    38ec:	9e 81       	ldd	r25, Y+6	; 0x06
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	69 f7       	brne	.-38     	; 0x38cc <main+0x14d4>
    38f2:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <main+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f6:	6f 81       	ldd	r22, Y+7	; 0x07
    38f8:	78 85       	ldd	r23, Y+8	; 0x08
    38fa:	89 85       	ldd	r24, Y+9	; 0x09
    38fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	9e 83       	std	Y+6, r25	; 0x06
    3908:	8d 83       	std	Y+5, r24	; 0x05
    390a:	8d 81       	ldd	r24, Y+5	; 0x05
    390c:	9e 81       	ldd	r25, Y+6	; 0x06
    390e:	9a 83       	std	Y+2, r25	; 0x02
    3910:	89 83       	std	Y+1, r24	; 0x01
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	9a 81       	ldd	r25, Y+2	; 0x02
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <main+0x151e>
    391a:	9a 83       	std	Y+2, r25	; 0x02
    391c:	89 83       	std	Y+1, r24	; 0x01
    391e:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <main+0xa0>
			
		}
	}
	else
	{
		LCD_clearscreen();
    3922:	0e 94 88 0a 	call	0x1510	; 0x1510 <LCD_clearscreen>
    3926:	0c 94 09 12 	jmp	0x2412	; 0x2412 <main+0x1a>

0000392a <__udivmodhi4>:
    392a:	aa 1b       	sub	r26, r26
    392c:	bb 1b       	sub	r27, r27
    392e:	51 e1       	ldi	r21, 0x11	; 17
    3930:	07 c0       	rjmp	.+14     	; 0x3940 <__udivmodhi4_ep>

00003932 <__udivmodhi4_loop>:
    3932:	aa 1f       	adc	r26, r26
    3934:	bb 1f       	adc	r27, r27
    3936:	a6 17       	cp	r26, r22
    3938:	b7 07       	cpc	r27, r23
    393a:	10 f0       	brcs	.+4      	; 0x3940 <__udivmodhi4_ep>
    393c:	a6 1b       	sub	r26, r22
    393e:	b7 0b       	sbc	r27, r23

00003940 <__udivmodhi4_ep>:
    3940:	88 1f       	adc	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	5a 95       	dec	r21
    3946:	a9 f7       	brne	.-22     	; 0x3932 <__udivmodhi4_loop>
    3948:	80 95       	com	r24
    394a:	90 95       	com	r25
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	08 95       	ret

00003952 <__divmodhi4>:
    3952:	97 fb       	bst	r25, 7
    3954:	09 2e       	mov	r0, r25
    3956:	07 26       	eor	r0, r23
    3958:	0a d0       	rcall	.+20     	; 0x396e <__divmodhi4_neg1>
    395a:	77 fd       	sbrc	r23, 7
    395c:	04 d0       	rcall	.+8      	; 0x3966 <__divmodhi4_neg2>
    395e:	e5 df       	rcall	.-54     	; 0x392a <__udivmodhi4>
    3960:	06 d0       	rcall	.+12     	; 0x396e <__divmodhi4_neg1>
    3962:	00 20       	and	r0, r0
    3964:	1a f4       	brpl	.+6      	; 0x396c <__divmodhi4_exit>

00003966 <__divmodhi4_neg2>:
    3966:	70 95       	com	r23
    3968:	61 95       	neg	r22
    396a:	7f 4f       	sbci	r23, 0xFF	; 255

0000396c <__divmodhi4_exit>:
    396c:	08 95       	ret

0000396e <__divmodhi4_neg1>:
    396e:	f6 f7       	brtc	.-4      	; 0x396c <__divmodhi4_exit>
    3970:	90 95       	com	r25
    3972:	81 95       	neg	r24
    3974:	9f 4f       	sbci	r25, 0xFF	; 255
    3976:	08 95       	ret

00003978 <__prologue_saves__>:
    3978:	2f 92       	push	r2
    397a:	3f 92       	push	r3
    397c:	4f 92       	push	r4
    397e:	5f 92       	push	r5
    3980:	6f 92       	push	r6
    3982:	7f 92       	push	r7
    3984:	8f 92       	push	r8
    3986:	9f 92       	push	r9
    3988:	af 92       	push	r10
    398a:	bf 92       	push	r11
    398c:	cf 92       	push	r12
    398e:	df 92       	push	r13
    3990:	ef 92       	push	r14
    3992:	ff 92       	push	r15
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	ca 1b       	sub	r28, r26
    39a2:	db 0b       	sbc	r29, r27
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	0f be       	out	0x3f, r0	; 63
    39ac:	cd bf       	out	0x3d, r28	; 61
    39ae:	09 94       	ijmp

000039b0 <__epilogue_restores__>:
    39b0:	2a 88       	ldd	r2, Y+18	; 0x12
    39b2:	39 88       	ldd	r3, Y+17	; 0x11
    39b4:	48 88       	ldd	r4, Y+16	; 0x10
    39b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    39b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    39bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    39be:	9b 84       	ldd	r9, Y+11	; 0x0b
    39c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    39c2:	b9 84       	ldd	r11, Y+9	; 0x09
    39c4:	c8 84       	ldd	r12, Y+8	; 0x08
    39c6:	df 80       	ldd	r13, Y+7	; 0x07
    39c8:	ee 80       	ldd	r14, Y+6	; 0x06
    39ca:	fd 80       	ldd	r15, Y+5	; 0x05
    39cc:	0c 81       	ldd	r16, Y+4	; 0x04
    39ce:	1b 81       	ldd	r17, Y+3	; 0x03
    39d0:	aa 81       	ldd	r26, Y+2	; 0x02
    39d2:	b9 81       	ldd	r27, Y+1	; 0x01
    39d4:	ce 0f       	add	r28, r30
    39d6:	d1 1d       	adc	r29, r1
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	cd bf       	out	0x3d, r28	; 61
    39e2:	ed 01       	movw	r28, r26
    39e4:	08 95       	ret

000039e6 <_exit>:
    39e6:	f8 94       	cli

000039e8 <__stop_program>:
    39e8:	ff cf       	rjmp	.-2      	; 0x39e8 <__stop_program>
